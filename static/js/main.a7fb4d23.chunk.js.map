{"version":3,"sources":["Common.module.scss","serviceWorker.ts","api/todolists-api.ts","features/Login/auth-reducer.ts","utils/error-utils.ts","app/app-reducer.ts","features/TodoLists/todolists-reducer.ts","components/ErrorSnackbar/ErrorSnackBar.tsx","features/TodoLists/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","components/TasksPreloader/TasksPreloader.tsx","features/TodoLists/TodoList/Task/Task.tsx","components/AddItemForm/AddItemFrom.tsx","features/TodoLists/TodoList/TodoList.tsx","features/TodolistsList/TodolistLists.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","LoginActionsTypes","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","title","post","todoListId","delete","put","todolistId","taskTitle","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","setAppErrorAC","setAppStatusAC","handleServerNetworkError","err","message","appActionsConst","initialState","isLoggedIn","setIsLoggedInAC","value","type","SET_IS_LOGGED_IN","TodolistsActionTypes","status","isInitialized","appActionStatus","error","success","APP_SET_ERROR","APP_SET_STATUS","setAppSuccessAC","APP_SET_SUCCESS","initializeAppTC","then","res","resultCode","SET_APP_INITIALIZED","changeTodolistFilterAC","filter","id","CHANGE_TODOLIST_FILTER","changeTodoListEntityStatusAC","entityStatus","CHANGE_TODO_LIST_ENTITY_STATUS","fetchTodoListsTC","todoLists","SET_TODO_LISTS","catch","deleteTodoList","REMOVE_TODOLIST","createTodoList","todoList","item","ADD_TODOLIST","updateTodoList","CHANGE_TODOLIST_TITLE","changeTodolistTitleAC","Alert","props","elevation","variant","CustomizedSnackbars","useSelector","state","app","snackbarType","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TasksActionsTypes","EditableSpan","React","memo","useStyles","makeStyles","input","width","editableSpan","display","justifyContent","alignItems","maxWidth","overflowWrap","opacity","disabled","changeTitle","classes","useState","editMode","setEditMode","setTitle","offEditMode","useCallback","trim","onChangeTitle","e","currentTarget","TextField","className","onBlur","onChange","autoFocus","onDoubleClick","setTaskLoadingStatusAC","todoListID","taskLoadingStatus","SET_TASK_LOADING_STATUS","fetchTasks","tasks","items","SET_TASKS","deleteTask","REMOVE_TASK","removeTaskAC","createTask","task","ADD_TASK","updateTask","domainModel","getState","find","t","Error","apiModel","description","priority","Low","startDate","deadline","UPDATE_TASK","updateTaskAC","TasksPreloader","size","preloaderTriangleStyle","color","margin","preloaderCircleStyle","position","left","top","style","listItem","Task","removeTask","changeTaskStatus","checked","Completed","New","newTitle","Box","entityTaskStatus","Checkbox","IconButton","onClick","Delete","AddItemForm","addItem","placeholder","setError","onAddItem","itemTitle","onChangeHandler","onKeyPressHandler","key","marginBottom","onKeyPress","helperText","label","AddBox","TodoList","demo","tl","useEffect","filterName","tasksForTodoList","useMemo","addTask","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","removeTodoList","changeTodoListTitle","s","btnGroup","Button","length","map","noTasksMessage","TodolistsList","login","addTodoList","todoListTitle","Grid","container","padding","justify","spacing","Paper","to","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","name","getFieldProps","errors","FormControlLabel","control","App","appStatus","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","path","exact","render","rootReducer","combineReducers","action","copyState","stateCopy","forEach","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.a7fb4d23.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroup\":\"Common_btnGroup__3hj-K\",\"noTasksMessage\":\"Common_noTasksMessage__2S6NA\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\n// * types\nexport type TodolistT = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\n\nexport type ResponseT<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  data: D;\n};\n\nexport enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  High = 2,\n  Later = 3,\n}\n\nexport type TaskT = {\n  description: string;\n  title: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\n\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n};\n\ntype GetTasksResponse = {\n  error: string | null;\n  totalCount: number;\n  items: Array<TaskT>;\n};\n\nconst settings = {\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"98ca0a48-2755-4c64-8a17-87fb70df4a7a\",\n  },\n};\n\n// * API\nconst instance = axios.create({\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n  ...settings,\n});\n\nexport const todoListsAPI = {\n  getTodolists() {\n    return instance.get<Array<TodolistT>>(\"todo-lists\");\n  },\n\n  createTodoList(title: string) {\n    return instance.post<ResponseT<{ item: TodolistT }>>(\"todo-lists\", {\n      title,\n    });\n  },\n\n  deleteTodoList(todoListId: string) {\n    return instance.delete<ResponseT>(`todo-lists/${todoListId}`);\n  },\n\n  updateTodolist(todoListId: string, title: string) {\n    return instance.put<ResponseT>(`todo-lists/${todoListId}`, {\n      title,\n    });\n  },\n\n  getTasks(todoListId: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`);\n  },\n\n  createTask(todolistId: string, taskTitle: string) {\n    return instance.post<ResponseT<{ item: TaskT }>>(\n      `todo-lists/${todolistId}/tasks`,\n      {\n        title: taskTitle,\n      }\n    );\n  },\n\n  deleteTask(taskId: string, todoListId: string) {\n    return instance.delete<ResponseT>(\n      `todo-lists/${todoListId}/tasks/${taskId}`\n    );\n  },\n\n  updateTask(taskId: string, todoListId: string, model: UpdateTaskModelType) {\n    return instance.put<ResponseT<TaskT>>(\n      `todo-lists/${todoListId}/tasks/${taskId}`,\n      model\n    );\n  },\n};\n\nexport type LoginParamsT = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: string;\n};\nexport const authAPI = {\n  login(data: LoginParamsT) {\n    return instance.post<ResponseT<{ userId?: number }>>(\"auth/login\", data);\n  },\n  logout() {\n    return instance.delete<ResponseT<{ userId?: number }>>(\"auth/login\");\n  },\n  me() {\n    return instance.get<\n      ResponseT<{ id: number; email: string; login: string }>\n    >(\"auth/me\");\n  },\n};\n","import { AppRootStateT } from \"../../app/store\";\nimport { ThunkAction } from \"redux-thunk\";\nimport {\n  setAppStatusAC,\n  setAppStatusAT,\n  setAppSuccessAC,\n  setAppSuccessAT,\n} from \"../../app/app-reducer\";\nimport { authAPI, LoginParamsT } from \"../../api/todolists-api\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\n\n// * types\ntype ActionsT = setIsLoggedInAT;\n\nexport type setIsLoggedInAT = ReturnType<typeof setIsLoggedInAC>;\n\nenum LoginActionsTypes {\n  SET_IS_LOGGED_IN = \"SET-IS-LOGGED-IN\",\n}\n\nexport type LoginThunkT<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppRootStateT,\n  unknown,\n  ActionsT | setAppStatusAT | setAppSuccessAT\n>;\n\nexport type LoginStateType = {\n  isLoggedIn: boolean;\n};\n\n// * reducer\nconst initialState: LoginStateType = {\n  isLoggedIn: false,\n};\n\nexport const authReducer = (\n  state: LoginStateType = initialState,\n  action: ActionsT\n): LoginStateType => {\n  const { SET_IS_LOGGED_IN } = LoginActionsTypes;\n  switch (action.type) {\n    case SET_IS_LOGGED_IN: {\n      return { ...state, isLoggedIn: action.value };\n    }\n    default:\n      return state;\n  }\n};\n\n// * Action Creators\n\nexport const setIsLoggedInAC = (value: boolean) => {\n  return {\n    type: LoginActionsTypes.SET_IS_LOGGED_IN,\n    value,\n  } as const;\n};\n\n//* Thunks\nexport const loginTC = (data: LoginParamsT): LoginThunkT => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  authAPI\n    .login(data)\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC(true));\n        dispatch(setAppSuccessAC(\"Welcome!\"));\n        dispatch(setAppStatusAC(\"succeeded\"));\n      } else {\n        handleServerAppError(res.data, dispatch);\n        dispatch(setAppStatusAC(\"failed\"));\n      }\n    })\n    .catch((err) => handleServerNetworkError(err, dispatch));\n};\nexport const logoutTC = (): LoginThunkT => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  authAPI\n    .logout()\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC(false));\n        dispatch(setAppSuccessAC(\"Bue!\"));\n        dispatch(setAppStatusAC(\"succeeded\"));\n      } else {\n        handleServerAppError(res.data, dispatch);\n        dispatch(setAppStatusAC(\"failed\"));\n      }\n    })\n    .catch((err) => handleServerNetworkError(err, dispatch));\n};\n","import {\n  setAppErrorAC,\n  SetAppErrorAT,\n  setAppStatusAC,\n  setAppStatusAT,\n} from \"../app/app-reducer\";\nimport { ResponseT } from \"../api/todolists-api\";\nimport { Dispatch } from \"redux\";\nimport { AppDispatchT } from \"../app/store\";\n\nexport const handleServerAppError = <D>(\n  data: ResponseT<D>,\n  dispatch: AppDispatchT<SetAppErrorAT | setAppStatusAT>\n): void => {\n  if (data.messages[0]) {\n    dispatch(setAppErrorAC(data.messages[0]));\n  } else {\n    dispatch(setAppErrorAC(\"Unknown error :-(\"));\n  }\n  dispatch(setAppStatusAC(\"failed\"));\n};\n\nexport const handleServerNetworkError = (\n  err: { message: string },\n  dispatch: AppDispatchT<SetAppErrorAT | setAppStatusAT>\n): void => {\n  dispatch(setAppErrorAC(err.message ? err.message : \"Unknown error!\"));\n  dispatch(setAppStatusAC(\"failed\"));\n};\n","// * types\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateT} from \"./store\";\nimport {authAPI} from \"../api/todolists-api\";\nimport {setIsLoggedInAC, setIsLoggedInAT} from \"../features/Login/auth-reducer\";\n\nexport type InitialStateT = {\n  status: StatusT;\n  isInitialized: boolean;\n  appActionStatus: appActionStatusT;\n};\n\nexport type appActionStatusT = {\n  error: string | null;\n  success: string | null;\n};\n\nexport type StatusT = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n\nenum appActionsConst {\n  APP_SET_STATUS = \"APP/SET-STATUS\",\n  APP_SET_ERROR = \"APP/SET-ERROR\",\n  APP_SET_SUCCESS = \"APP/SET-SUCCESS\",\n  SET_APP_INITIALIZED = \"APP/SET-APP-INITIALIZED\",\n}\n\nexport type AppReducerThunkT<ReturnType = void> = ThunkAction<\n    ReturnType,\n    AppRootStateT,\n    unknown,\n    ActionsT | setIsLoggedInAT\n    >;\n\ntype ActionsT = SetAppErrorAT | setAppStatusAT | setAppSuccessAT | setAppInitializedAT;\n\nexport type SetAppErrorAT = ReturnType<typeof setAppErrorAC>;\nexport type setAppStatusAT = ReturnType<typeof setAppStatusAC>;\nexport type setAppSuccessAT = ReturnType<typeof setAppSuccessAC>;\nexport type setAppInitializedAT = ReturnType<typeof setAppInitializedAC>;\n\n// * reducer\nconst initialState: InitialStateT = {\n  status: \"idle\",\n  // true if you entered correct email and password before and you have valid cookies\n  isInitialized: false,\n  appActionStatus: {\n    error: null,\n    success: null,\n  },\n};\n\nexport const appReducer = (\n  state: InitialStateT = initialState,\n  action: ActionsT\n): InitialStateT => {\n  const { APP_SET_STATUS, APP_SET_ERROR, APP_SET_SUCCESS, SET_APP_INITIALIZED} = appActionsConst;\n\n  switch (action.type) {\n    case APP_SET_STATUS: {\n      return { ...state, status: action.status };\n    }\n    case APP_SET_ERROR: {\n      return {\n        ...state,\n        appActionStatus: {\n          ...state.appActionStatus,\n          error: action.error,\n          success: null,\n        },\n      };\n    }\n    case APP_SET_SUCCESS: {\n      return {\n        ...state,\n        appActionStatus: {\n          ...state.appActionStatus,\n          error: null,\n          success: action.success,\n        },\n      };\n    }\n    case SET_APP_INITIALIZED: {\n      return {...state, isInitialized: action.value}\n    }\n    default:\n      return state;\n  }\n};\n\n// * AC\nexport const setAppErrorAC = (error: string | null) => {\n  return {\n    type: appActionsConst.APP_SET_ERROR,\n    error,\n  } as const;\n};\nexport const setAppStatusAC = (status: StatusT) => {\n  return {\n    type: appActionsConst.APP_SET_STATUS,\n    status,\n  } as const;\n};\nexport const setAppSuccessAC = (success: string | null) => {\n  return {\n    type: appActionsConst.APP_SET_SUCCESS,\n    success,\n  } as const;\n};\nexport const setAppInitializedAC = (value: boolean) => {\n  return {\n    type: appActionsConst.SET_APP_INITIALIZED,\n    value,\n  } as const;\n};\n\n// * TC\n\nexport const initializeAppTC = (): AppReducerThunkT => (dispatch) => {\n  authAPI.me()\n      .then(res => {\n        if(res.data.resultCode === 0) {\n          dispatch(setIsLoggedInAC(true));\n        } else {\n\n        }\n\n        dispatch(setAppInitializedAC(true));\n\n\n      })\n}\n","import { todoListsAPI, TodolistT } from \"../../api/todolists-api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppRootStateT } from \"../../app/store\";\nimport {\n  setAppStatusAC,\n  setAppStatusAT,\n  setAppSuccessAC,\n  setAppSuccessAT,\n  StatusT,\n} from \"../../app/app-reducer\";\nimport {\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\n\n// * types\nexport type FilterValuesT = \"all\" | \"active\" | \"completed\";\n\nexport type TodolistDomainT = TodolistT & {\n  filter: FilterValuesT;\n  entityStatus: StatusT;\n};\n\nexport type TodolistReducerStateT = Array<TodolistDomainT>;\n\ntype ActionsT =\n  | RemoveTodolistAT\n  | AddTodolistAT\n  | ChangeTodolistTitleAT\n  | ChangeTodolistFilterAT\n  | SetTodoListsAT\n  | changeTodoListEntityStatusAT;\n\nexport enum TodolistsActionTypes {\n  SET_TODO_LISTS = \"SET-TODO-LISTS\",\n  REMOVE_TODOLIST = \"REMOVE-TODOLIST\",\n  ADD_TODOLIST = \"ADD-TODOLIST\",\n  CHANGE_TODOLIST_TITLE = \"CHANGE-TODOLIST-TITLE\",\n  CHANGE_TODOLIST_FILTER = \"CHANGE-TODOLIST-FILTER\",\n  CHANGE_TODO_LIST_ENTITY_STATUS = \"CHANGE-TODO-LIST-ENTITY-STATUS\",\n}\n\nexport type RemoveTodolistAT = ReturnType<typeof removeTodolistAC>;\nexport type AddTodolistAT = ReturnType<typeof addTodolistAC>;\nexport type ChangeTodolistTitleAT = ReturnType<typeof changeTodolistTitleAC>;\nexport type ChangeTodolistFilterAT = ReturnType<typeof changeTodolistFilterAC>;\nexport type SetTodoListsAT = ReturnType<typeof setTodoListsAC>;\nexport type changeTodoListEntityStatusAT = ReturnType<\n  typeof changeTodoListEntityStatusAC\n>;\n\nexport type TodoListThunkT<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppRootStateT,\n  unknown,\n  ActionsT | setAppStatusAT | setAppSuccessAT\n>;\n\n// * reducer\nconst initialState: TodolistReducerStateT = [];\n\nexport const todolistsReducer = (\n  state: TodolistReducerStateT = initialState,\n  action: ActionsT\n): TodolistReducerStateT => {\n  const {\n    CHANGE_TODOLIST_FILTER,\n    CHANGE_TODOLIST_TITLE,\n    ADD_TODOLIST,\n    REMOVE_TODOLIST,\n    SET_TODO_LISTS,\n    CHANGE_TODO_LIST_ENTITY_STATUS,\n  } = TodolistsActionTypes;\n\n  switch (action.type) {\n    case REMOVE_TODOLIST:\n      return state.filter((tl) => tl.id !== action.id);\n    case ADD_TODOLIST: {\n      return [\n        {\n          ...action.todoList,\n          filter: \"all\",\n          entityStatus: \"idle\",\n        },\n        ...state,\n      ];\n    }\n    case CHANGE_TODOLIST_TITLE:\n      return state.map((tl) =>\n        tl.id === action.id ? { ...tl, title: action.title } : tl\n      );\n    case CHANGE_TODOLIST_FILTER:\n      return state.map((tl) =>\n        tl.id === action.id ? { ...tl, filter: action.filter } : tl\n      );\n    case CHANGE_TODO_LIST_ENTITY_STATUS: {\n      return state.map((tl) =>\n        tl.id === action.todoListId\n          ? { ...tl, entityStatus: action.entityStatus }\n          : tl\n      );\n    }\n    case SET_TODO_LISTS:\n      return action.todoLists.map((tl) => ({\n        ...tl,\n        filter: \"all\",\n        entityStatus: \"idle\",\n      }));\n    default:\n      return state;\n  }\n};\n\n// * Action creators\nexport const removeTodolistAC = (todolistId: string) => {\n  return {\n    type: TodolistsActionTypes.REMOVE_TODOLIST,\n    id: todolistId,\n  } as const;\n};\n\nexport const addTodolistAC = (todoList: TodolistT) => {\n  return {\n    type: TodolistsActionTypes.ADD_TODOLIST,\n    todoList,\n  } as const;\n};\n\nexport const changeTodolistTitleAC = (id: string, title: string) => {\n  return {\n    type: TodolistsActionTypes.CHANGE_TODOLIST_TITLE,\n    title,\n    id,\n  } as const;\n};\n\nexport const changeTodolistFilterAC = (filter: FilterValuesT, id: string) => {\n  return {\n    type: TodolistsActionTypes.CHANGE_TODOLIST_FILTER,\n    id,\n    filter,\n  } as const;\n};\n\nexport const setTodoListsAC = (todoLists: Array<TodolistT>) => {\n  return {\n    type: TodolistsActionTypes.SET_TODO_LISTS,\n    todoLists,\n  } as const;\n};\n\nexport const changeTodoListEntityStatusAC = (\n  todoListId: string,\n  entityStatus: StatusT\n) => {\n  return {\n    type: TodolistsActionTypes.CHANGE_TODO_LIST_ENTITY_STATUS,\n    entityStatus,\n    todoListId,\n  } as const;\n};\n\n// * Thunks\nexport const fetchTodoListsTC = (): TodoListThunkT => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todoListsAPI\n    .getTodolists()\n    .then((res) => {\n      dispatch(setTodoListsAC(res.data));\n      dispatch(setAppStatusAC(\"succeeded\"));\n    })\n    .catch((err) => {\n      handleServerNetworkError(err, dispatch);\n    });\n};\n\nexport const deleteTodoList = (todoListId: string): TodoListThunkT => (\n  dispatch\n) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  dispatch(changeTodoListEntityStatusAC(todoListId, \"loading\"));\n\n  todoListsAPI\n    .deleteTodoList(todoListId)\n    .then(() => {\n      dispatch(removeTodolistAC(todoListId));\n      dispatch(setAppStatusAC(\"succeeded\"));\n      dispatch(setAppSuccessAC(\"Todolist was deleted!\"));\n    })\n    .catch((err) => {\n      handleServerNetworkError(err, dispatch);\n    });\n};\n\nexport const createTodoList = (title: string): TodoListThunkT => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todoListsAPI\n    .createTodoList(title)\n    .then((res) => {\n      dispatch(addTodolistAC(res.data.data.item));\n      dispatch(setAppStatusAC(\"succeeded\"));\n      dispatch(setAppSuccessAC(\"Todolist was added!\"));\n    })\n    .catch((err) => {\n      handleServerNetworkError(err, dispatch);\n    });\n};\n\nexport const updateTodoList = (\n  todoListId: string,\n  title: string\n): TodoListThunkT => (dispatch) => {\n  todoListsAPI\n    .updateTodolist(todoListId, title)\n    .then(() => {\n      dispatch(changeTodolistTitleAC(todoListId, title));\n      dispatch(setAppSuccessAC(\"Todolist was updated!\"));\n    })\n    .catch((err) => {\n      handleServerNetworkError(err, dispatch);\n    });\n};\n","import React from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"../../app/store\";\nimport {appActionStatusT, setAppErrorAC, setAppSuccessAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport function CustomizedSnackbars() {\n  const appActionStatus = useSelector<AppRootStateT, appActionStatusT>(\n    (state) => state.app.appActionStatus\n  );\n\n  const message = appActionStatus.error || appActionStatus.success;\n  const snackbarType = appActionStatus.error ? \"error\" : \"success\";\n\n\n  const dispatch = useDispatch();\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    dispatch(setAppErrorAC(null));\n    dispatch(setAppSuccessAC(null));\n  };\n\n  return (\n    <Snackbar open={!!appActionStatus.error || !!appActionStatus.success} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={snackbarType}>\n        {message}\n      </Alert>\n    </Snackbar>\n  );\n}\n","import {\n  AddTodolistAT,\n  changeTodoListEntityStatusAC,\n  changeTodoListEntityStatusAT,\n  RemoveTodolistAT,\n  SetTodoListsAT,\n  TodolistsActionTypes,\n} from \"./todolists-reducer\";\nimport {\n  TaskPriorities,\n  TaskStatuses,\n  TaskT,\n  todoListsAPI,\n  UpdateTaskModelType,\n} from \"../../api/todolists-api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppRootStateT } from \"../../app/store\";\nimport {\n  SetAppErrorAT,\n  setAppStatusAC,\n  setAppStatusAT,\n  setAppSuccessAC,\n  setAppSuccessAT,\n  StatusT,\n} from \"../../app/app-reducer\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\n\n// * types\ntype ActionsT =\n  | RemoveTaskAT\n  | AddTaskAT\n  | UpdateTaskAT\n  | AddTodolistAT\n  | RemoveTodolistAT\n  | SetTodoListsAT\n  | SetTasksAT\n  | setTaskLoadingStatusAT;\n\nenum TasksActionsTypes {\n  REMOVE_TASK = \"REMOVE-TASK\",\n  ADD_TASK = \"ADD-TASK\",\n  UPDATE_TASK = \"CHANGE-TASK-STATUS\",\n  SET_TASKS = \"SET-TASKS\",\n  SET_TASK_LOADING_STATUS = \"SET-TASK-LOADING-STATUS\",\n}\n\nexport type RemoveTaskAT = ReturnType<typeof removeTaskAC>;\nexport type AddTaskAT = ReturnType<typeof addTaskAC>;\nexport type UpdateTaskAT = ReturnType<typeof updateTaskAC>;\nexport type SetTasksAT = ReturnType<typeof setTasksAC>;\nexport type setTaskLoadingStatusAT = ReturnType<typeof setTaskLoadingStatusAC>;\n\nexport type TasksThunkT<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppRootStateT,\n  unknown,\n  | ActionsT\n  | SetAppErrorAT\n  | setAppStatusAT\n  | changeTodoListEntityStatusAT\n  | setAppSuccessAT\n>;\n\nexport type TaskStateT = {\n  [key: string]: Array<TaskDomainT>;\n};\n\nexport type TaskDomainT = TaskT & {\n  entityTaskStatus: StatusT;\n};\n\nexport type UpdateDomainTaskModelT = {\n  title?: string;\n  description?: string;\n  status?: TaskStatuses;\n  priority?: TaskPriorities;\n  startDate?: string;\n  deadline?: string;\n};\n\n// * reducer\nconst initialState: TaskStateT = {};\n\nexport const tasksReducer = (\n  state: TaskStateT = initialState,\n  action: ActionsT\n): TaskStateT => {\n  const {\n    REMOVE_TASK,\n    ADD_TASK,\n    UPDATE_TASK,\n    SET_TASKS,\n    SET_TASK_LOADING_STATUS,\n  } = TasksActionsTypes;\n\n  switch (action.type) {\n    case REMOVE_TASK: {\n      return {\n        ...state,\n        [action.todoListID]: state[action.todoListID].filter(\n          (task) => task.id !== action.taskId\n        ),\n      };\n    }\n    case ADD_TASK: {\n      const { task } = action;\n      return {\n        ...state,\n        [task.todoListId]: [\n          { ...task, entityTaskStatus: \"idle\" },\n          ...state[task.todoListId],\n        ],\n      };\n    }\n    case UPDATE_TASK: {\n      return {\n        ...state,\n        [action.todoListID]: state[action.todoListID].map((t) =>\n          t.id === action.taskId ? { ...t, ...action.model } : t\n        ),\n      };\n    }\n    case TodolistsActionTypes.ADD_TODOLIST: {\n      return {\n        ...state,\n        [action.todoList.id]: [],\n      };\n    }\n    case TodolistsActionTypes.REMOVE_TODOLIST: {\n      const copyState = { ...state };\n      delete copyState[action.id];\n      return copyState;\n    }\n    case TodolistsActionTypes.SET_TODO_LISTS: {\n      const stateCopy = { ...state };\n      action.todoLists.forEach((tl) => {\n        stateCopy[tl.id] = [];\n      });\n\n      return stateCopy;\n    }\n    case SET_TASKS: {\n      return {\n        ...state,\n        [action.todoListID]: action.tasks.map((t) => ({\n          ...t,\n          entityTaskStatus: \"idle\",\n        })),\n      };\n    }\n    case SET_TASK_LOADING_STATUS: {\n      return {\n        ...state,\n        [action.todoListID]: state[action.todoListID].map((t) =>\n          t.id === action.taskId\n            ? {\n                ...t,\n                entityTaskStatus: action.taskLoadingStatus,\n              }\n            : t\n        ),\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n// * Action Creators\nexport const removeTaskAC = (taskId: string, todoListID: string) => {\n  return {\n    type: TasksActionsTypes.REMOVE_TASK,\n    taskId,\n    todoListID,\n  } as const;\n};\n\nexport const addTaskAC = (task: TaskT) => {\n  return {\n    type: TasksActionsTypes.ADD_TASK,\n    task,\n  } as const;\n};\n\nexport const updateTaskAC = (\n  taskId: string,\n  todoListID: string,\n  model: UpdateDomainTaskModelT\n) => {\n  return {\n    type: TasksActionsTypes.UPDATE_TASK,\n    taskId,\n    todoListID,\n    model,\n  } as const;\n};\n\nexport const setTasksAC = (todoListID: string, tasks: Array<TaskT>) => {\n  return {\n    type: TasksActionsTypes.SET_TASKS,\n    todoListID,\n    tasks,\n  } as const;\n};\n\nexport const setTaskLoadingStatusAC = (\n  taskId: string,\n  todoListID: string,\n  taskLoadingStatus: StatusT\n) => {\n  return {\n    type: TasksActionsTypes.SET_TASK_LOADING_STATUS,\n    taskId,\n    todoListID,\n    taskLoadingStatus,\n  } as const;\n};\n\n//* Thunks\nexport const fetchTasks = (todoListId: string): TasksThunkT => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  dispatch(changeTodoListEntityStatusAC(todoListId, \"loading\"));\n  todoListsAPI\n    .getTasks(todoListId)\n    .then((res) => {\n      dispatch(setTasksAC(todoListId, res.data.items));\n      dispatch(setAppStatusAC(\"succeeded\"));\n      dispatch(changeTodoListEntityStatusAC(todoListId, \"succeeded\"));\n    })\n    .catch((err) => handleServerNetworkError(err, dispatch));\n};\n\nexport const deleteTask = (taskId: string, todoListId: string): TasksThunkT => (\n  dispatch\n) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  dispatch(setTaskLoadingStatusAC(taskId, todoListId, \"loading\"));\n\n  todoListsAPI\n    .deleteTask(taskId, todoListId)\n    .then(() => {\n      dispatch(removeTaskAC(taskId, todoListId));\n      dispatch(setAppStatusAC(\"succeeded\"));\n      dispatch(setAppSuccessAC(\"Task was deleted!\"));\n    })\n    .catch((err) => handleServerNetworkError(err, dispatch));\n};\n\nexport const createTask = (todoListId: string, title: string): TasksThunkT => (\n  dispatch\n) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  dispatch(changeTodoListEntityStatusAC(todoListId, \"loading\"));\n  todoListsAPI\n    .createTask(todoListId, title)\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(addTaskAC(res.data.data.item));\n        dispatch(setAppStatusAC(\"succeeded\"));\n        dispatch(changeTodoListEntityStatusAC(todoListId, \"succeeded\"));\n        dispatch(setAppSuccessAC(\"Task was added!\"));\n      } else {\n        handleServerAppError(res.data, dispatch);\n        dispatch(changeTodoListEntityStatusAC(todoListId, \"failed\"));\n      }\n    })\n    .catch((err) => {\n      handleServerNetworkError(err, dispatch);\n      dispatch(changeTodoListEntityStatusAC(todoListId, \"failed\"));\n    });\n};\n\nexport const updateTask = (\n  taskId: string,\n  todoListId: string,\n  domainModel: UpdateDomainTaskModelT\n): TasksThunkT => (dispatch, getState) => {\n  const state = getState();\n  const task = state.tasks[todoListId].find((t) => t.id === taskId);\n\n  dispatch(setTaskLoadingStatusAC(taskId, todoListId, \"loading\"));\n  if (!task) {\n    throw new Error(\"Task no found in the STATE\");\n  }\n\n  const apiModel: UpdateTaskModelType = {\n    title: task.title,\n    description: task.description,\n    status: task.status,\n    priority: TaskPriorities.Low,\n    startDate: task.startDate,\n    deadline: task.deadline,\n    ...domainModel,\n  };\n\n  todoListsAPI\n    .updateTask(taskId, todoListId, apiModel)\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(updateTaskAC(taskId, todoListId, domainModel));\n        dispatch(setAppSuccessAC(\"Task was updated!\"));\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n      dispatch(setTaskLoadingStatusAC(taskId, todoListId, \"succeeded\"));\n    })\n    .catch((err) => handleServerNetworkError(err, dispatch));\n};\n","import React, { ChangeEvent, useCallback, useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\ntype EditableSpanPropsType = {\n  taskTitle: string;\n  changeTitle: (newTitle: string) => void;\n  disabled?: boolean\n};\n\n\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  const useStyles = makeStyles({\n    input: {\n      width: \"70%\",\n    },\n    editableSpan: {\n      display: \"inline-flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      maxWidth: \"70%\",\n      overflowWrap: \"anywhere\",\n      opacity: `${props.disabled ? \"0.5\" : \"1\"}`\n    },\n  });\n\n\n  const { changeTitle, taskTitle } = props;\n  const classes = useStyles();\n\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [title, setTitle] = useState<string>(taskTitle);\n\n  const onEditMode = () => {\n    if(props.disabled) return;\n    setEditMode(true);\n  };\n\n  const offEditMode = useCallback(() => {\n    setEditMode(false);\n    if (title.trim()) changeTitle(title.trim());\n  }, [title, changeTitle]);\n\n  const onChangeTitle = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value),\n    []\n  );\n\n  return editMode ? (\n    <TextField\n      className={classes.input}\n      value={title}\n      onBlur={offEditMode}\n      onChange={onChangeTitle}\n      autoFocus\n    />\n  ) : (\n    <span onDoubleClick={onEditMode} className={classes.editableSpan} >\n      {taskTitle}\n    </span>\n  );\n});\n","import {BallTriangle, Circles} from '@agney/react-loading';\nimport React, {CSSProperties} from \"react\";\n\ntype TaskPreloaderPropsT = {\n    size?: string;\n    type?: \"circle\" | \"triangle\"\n}\n\nexport function TasksPreloader({size = \"100\", type = \"triangle\", ...props}: TaskPreloaderPropsT) {\n    const preloaderTriangleStyle: CSSProperties = {\n        width: `${size}px`,\n        color: \"#dc004e\",\n        margin: \"20px auto 0\",\n    };\n\n    const preloaderCircleStyle: CSSProperties = {\n        width: `${size}px`,\n        color: \"#dc004e\",\n        position: \"absolute\",\n        left: \"11px\",\n        top: \"11px\",\n    };\n\n    return (\n        <div style={type === \"circle\" ? preloaderCircleStyle : preloaderTriangleStyle}>\n            {type === \"circle\" ? <Circles/> : <BallTriangle/>}\n        </div>\n    );\n}","import React, {ChangeEvent, useCallback} from \"react\";\nimport { EditableSpan } from \"../../../../components/EditableSpan/EditableSpan\";\nimport { Box, Checkbox, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { deleteTask, TaskDomainT, updateTask } from \"../../tasks-reducer\";\nimport { useDispatch } from \"react-redux\";\nimport { TaskStatuses } from \"../../../../api/todolists-api\";\nimport { TasksPreloader } from \"../../../../components/TasksPreloader/TasksPreloader\";\n\nexport type TodoListItemType = {\n  todoListId: string;\n  task: TaskDomainT;\n};\n\nconst useStyles = makeStyles({\n  listItem: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    maxWidth: \"250px\",\n  },\n});\n\nexport const Task: React.FC<TodoListItemType> = React.memo((props) => {\n  const { task, todoListId } = props;\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const removeTask = useCallback(() => {\n    dispatch(deleteTask(task.id, todoListId));\n  }, [dispatch, todoListId, task.id]);\n\n  const changeTaskStatus = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      const { checked } = e.currentTarget;\n      const status = checked ? TaskStatuses.Completed : TaskStatuses.New;\n\n      dispatch(updateTask(task.id, todoListId, { status }));\n    },\n    [dispatch, todoListId, task.id]\n  );\n\n  const changeTitle = useCallback(\n    (newTitle: string): void => {\n      dispatch(updateTask(task.id, todoListId, { title: newTitle }));\n    },\n    [dispatch, todoListId, task.id]\n  );\n\n\n  return (\n    <li\n      className={`${task.status === TaskStatuses.Completed ? \"is-done\" : \"\"} ${\n        classes.listItem\n      }`}\n    >\n      <Box style={{ position: \"relative\" }}>\n        <span className={`${task.entityTaskStatus !== \"loading\" ? \"visibility\" : \"\"}`}>\n          <TasksPreloader size={\"20\"} type={\"circle\"} />\n        </span>\n        <Checkbox\n          className={`${task.entityTaskStatus === \"loading\" ? \"visibility\" : \"\"}`}\n          onChange={changeTaskStatus}\n          checked={task.status === TaskStatuses.Completed}\n          color={\"primary\"}\n        />\n        <EditableSpan taskTitle={task.title} changeTitle={changeTitle} disabled={task.entityTaskStatus === \"loading\"}/>\n      </Box>\n      <IconButton onClick={removeTask} disabled={task.entityTaskStatus === \"loading\"}>\n        <Delete />\n      </IconButton>\n    </li>\n  );\n});\n","import React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useState,\n} from \"react\";\nimport { IconButton, TextField } from \"@material-ui/core\";\nimport { AddBox } from \"@material-ui/icons\";\n\ntype AddItemFormType = {\n  addItem: (title: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n};\n\nexport const AddItemForm = React.memo(({ disabled = false, ...props }: AddItemFormType) => {\n  const { addItem, placeholder } = props;\n\n  const [title, setTitle] = useState<string>(\"\");\n  const [error, setError] = useState<string | null>(null);\n\n  const onAddItem = useCallback(() => {\n    const itemTitle = title.trim();\n    if (itemTitle) {\n      addItem(itemTitle);\n    } else {\n      setError(\"Title is required!\");\n    }\n\n    setTitle(\"\");\n  }, [title, addItem]);\n\n  const onChangeHandler = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      if (error) setError(\"\");\n      setTitle(e.currentTarget.value);\n    },\n    [error]\n  );\n\n  const onKeyPressHandler = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Enter\") onAddItem();\n    },\n    [onAddItem]\n  );\n\n  return (\n    <div style={{ marginBottom: \"20px\" }}>\n      <TextField\n          disabled={disabled}\n        variant={\"outlined\"}\n        value={title}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n        error={!!error}\n        helperText={error}\n        label={placeholder ? placeholder : \"Enter task name...\"}\n      />\n      <IconButton onClick={onAddItem} color={\"primary\"} disabled={disabled}>\n        <AddBox />\n      </IconButton>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { Task } from \"./Task/Task\";\nimport { AddItemForm } from \"../../../components/AddItemForm/AddItemFrom\";\nimport { EditableSpan } from \"../../../components/EditableSpan/EditableSpan\";\nimport { AppBar, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport Button from \"@material-ui/core/Button\";\nimport s from \"../../../Common.module.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"../../../app/store\";\nimport {createTask, fetchTasks, TaskDomainT} from \"../tasks-reducer\";\nimport {\n  changeTodolistFilterAC,\n  deleteTodoList,\n  TodolistDomainT,\n  updateTodoList,\n} from \"../todolists-reducer\";\nimport { TaskStatuses, TaskT } from \"../../../api/todolists-api\";\nimport { TasksPreloader } from \"../../../components/TasksPreloader/TasksPreloader\";\nimport { StatusT } from \"../../../app/app-reducer\";\n\ntype TodoListPropsType = {\n  todoListId: string;\n  isLoggedIn: boolean;\n  demo?: boolean;\n};\n\nexport const TodoList = React.memo(({ demo = false, isLoggedIn, ...props} : TodoListPropsType) => {\n\n  const todoList = useSelector<AppRootStateT, TodolistDomainT>(\n    (state) => state.todoLists.filter((tl) => props.todoListId === tl.id)[0]\n  );\n  const tasks = useSelector<AppRootStateT, Array<TaskDomainT>>(\n    (state) => state.tasks[props.todoListId]\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if(demo) return;\n\n    dispatch(fetchTasks(todoList.id));\n\n  }, [dispatch, todoList.id]);\n\n  let tasksForTodoList = useMemo(() => {\n    if (todoList.filter === \"active\") {\n      return tasks.filter((task) => task.status === TaskStatuses.New);\n    }\n    if (todoList.filter === \"completed\") {\n      return tasks.filter((task) => task.status === TaskStatuses.Completed);\n    }\n\n    return tasks;\n  }, [todoList.filter, tasks]);\n\n  const addTask = useCallback(\n    (title: string) => {\n      dispatch(createTask(todoList.id, title));\n    },\n    [dispatch, todoList.id]\n  );\n\n  const onAllClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"all\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const onActiveClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"active\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const onCompletedClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"completed\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const removeTodoList = useCallback((): void => {\n    dispatch(deleteTodoList(todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const changeTodoListTitle = useCallback(\n    (newTitle: string) => {\n      dispatch(updateTodoList(todoList.id, newTitle));\n    },\n    [dispatch, todoList.id]\n  );\n\n  const showNoTasksMessage = (filterName: string): JSX.Element => {\n    filterName = filterName === \"all\" ? \"any\" : filterName;\n    return (\n      <span className={s.noTasksMessage}>You have no {filterName} tasks</span>\n    );\n  };\n\n  return (\n    <div>\n      <h3>\n        <EditableSpan\n          taskTitle={todoList.title}\n          changeTitle={changeTodoListTitle}\n          disabled={todoList.entityStatus === \"loading\"}\n        />\n        <IconButton onClick={removeTodoList} disabled={todoList.entityStatus === \"loading\"}>\n          <Delete />\n        </IconButton>\n      </h3>\n      <AddItemForm addItem={addTask} disabled={todoList.entityStatus === \"loading\"}/>\n      <div className={s.btnGroup}>\n        <Button\n          variant={todoList.filter === \"all\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onAllClickHandler}\n          size={\"small\"}\n        >\n          All\n        </Button>\n        <Button\n          variant={todoList.filter === \"active\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onActiveClickHandler}\n          size={\"small\"}\n        >\n          Active\n        </Button>\n        <Button\n          variant={todoList.filter === \"completed\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onCompletedClickHandler}\n          size={\"small\"}\n        >\n          Completed\n        </Button>\n      </div>\n      {todoList.entityStatus === \"loading\" ? (\n        <TasksPreloader />\n      ) : (\n        <ul>\n          {tasksForTodoList.length\n            ? tasksForTodoList.map((task) => (\n                <Task key={task.id} todoListId={props.todoListId} task={task} />\n              ))\n            : showNoTasksMessage(todoList.filter)}\n        </ul>\n      )}\n    </div>\n  );\n});\n","import React, { useCallback } from \"react\";\nimport { Redirect } from \"react-router\";\nimport { Container, Grid, Paper } from \"@material-ui/core\";\nimport { TodoList } from \"../TodoLists/TodoList/TodoList\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"../../app/store\";\nimport {\n  createTodoList,\n  TodolistDomainT,\n} from \"../TodoLists/todolists-reducer\";\nimport { AddItemForm } from \"../../components/AddItemForm/AddItemFrom\";\n\ntype TodolistsListT = {\n  demo?: boolean;\n};\n\nexport const TodolistsList = ({ demo }: TodolistsListT) => {\n  const todoLists = useSelector<AppRootStateT, Array<TodolistDomainT>>(\n    (state) => state.todoLists\n  );\n\n  const isLoggedIn = useSelector<AppRootStateT, boolean>(\n    (state) => state.login.isLoggedIn\n  );\n\n  const dispatch = useDispatch();\n\n  const addTodoList = useCallback(\n    (todoListTitle: string): void => {\n      dispatch(createTodoList(todoListTitle));\n    },\n    [dispatch]\n  );\n\n    if(!isLoggedIn) {\n        return <Redirect to={\"/login\"}/>\n    }\n\n  return (\n    <>\n      <Grid\n        container\n        style={{ padding: \"10px\" }}\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <AddItemForm\n          addItem={addTodoList}\n          placeholder={\"Enter Todo List name...\"}\n        />\n      </Grid>\n      <Grid container spacing={3}>\n        {todoLists.map((todoList) => {\n          return (\n            <Grid item key={todoList.id}>\n              <Paper elevation={5} style={{ padding: \"20px 10px\" }}>\n                <TodoList\n                  demo={demo}\n                  isLoggedIn={isLoggedIn}\n                  key={todoList.id}\n                  todoListId={todoList.id}\n                />\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </>\n  );\n};\n","import React from \"react\"\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateT} from \"../../app/store\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateT, boolean>(state => state.login.isLoggedIn);\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if(!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n\r\n            if(!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    });\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        name={\"email\"}\r\n                        {...formik.getFieldProps(\"email\")}\r\n                    />\r\n                    {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        name={\"password\"}\r\n                        {...formik.getFieldProps(\"password\")}\r\n                    />\r\n                    {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} checked={formik.values.rememberMe}/>}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from \"react\";\nimport { Route } from \"react-router\";\nimport \"./App.css\";\nimport {\n  AppBar,\n  Button,\n  IconButton,\n  Typography,\n  Toolbar,\n  Container,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport {\n  fetchTodoListsTC,\n} from \"../features/TodoLists/todolists-reducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"./store\";\nimport { CustomizedSnackbars } from \"../components/ErrorSnackbar/ErrorSnackBar\";\nimport {initializeAppTC, StatusT} from \"./app-reducer\";\nimport { TodolistsList } from \"../features/TodolistsList/TodolistLists\";\nimport { Login } from \"../features/Login/Login\";\nimport {TasksPreloader} from \"../components/TasksPreloader/TasksPreloader\";\nimport {logoutTC} from \"../features/Login/auth-reducer\";\n\ntype AppPropsT = {\n  demo?: boolean;\n};\n\nfunction App({ demo = false }: AppPropsT) {\n  const appStatus = useSelector<AppRootStateT, StatusT>(\n    (state) => state.app.status\n  );\n  const isInitialized = useSelector<AppRootStateT, boolean>(\n    (state) => state.app.isInitialized\n  );\n\n  const isLoggedIn = useSelector<AppRootStateT, boolean>(\n      (state) => state.login.isLoggedIn\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initializeAppTC())\n  }, [])\n\n  useEffect(() => {\n    if (demo) return;\n    dispatch(fetchTodoListsTC());\n  }, [dispatch]);\n\n  const logoutHandler = useCallback(() => {\n    dispatch(logoutTC())\n  }, []);\n\n  if(!isInitialized) {\n      return <div style={{position: \"fixed\", top: \"30%\", left: \"42%\", width: \"100%\"}}>\n        <TasksPreloader size={\"200\"} type={\"circle\"}/>\n      </div>;\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">News1</Typography>\n          {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\n        </Toolbar>\n        {appStatus === \"loading\" && <LinearProgress color=\"secondary\" />}\n\n        <CustomizedSnackbars />\n      </AppBar>\n\n      <Container>\n        <Route path={\"/\"} exact render={() => <TodolistsList demo={demo} />} />\n        <Route path={\"/login\"} render={() => <Login />} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import {combineReducers, createStore, applyMiddleware, Action} from \"redux\";\nimport { todolistsReducer } from \"../features/TodoLists/todolists-reducer\";\nimport { tasksReducer } from \"../features/TodoLists/tasks-reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk, {ThunkDispatch} from 'redux-thunk';\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\n\nconst rootReducer = combineReducers({\n  todoLists: todolistsReducer,\n  tasks: tasksReducer,\n  app: appReducer,\n  login: authReducer\n});\n\nexport type AppRootStateT = ReturnType<typeof rootReducer>;\nexport type AppDispatchT<AT extends Action> = ThunkDispatch<AppRootStateT, unknown, AT>;\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./app/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <Provider store={store}>\n      <HashRouter>\n          <App />\n      </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}