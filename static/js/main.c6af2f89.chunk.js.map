{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","EditableSpan.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","Task.tsx","AddItemFrom.tsx","TodoList.tsx","App.tsx","state/store.ts","index.tsx","Common.module.scss"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","useStyles","makeStyles","input","width","editableSpan","display","justifyContent","alignItems","maxWidth","overflowWrap","EditableSpan","React","memo","props","changeTitle","taskTitle","classes","useState","editMode","setEditMode","title","setTitle","offEditMode","useCallback","trim","onChangeTitle","e","currentTarget","value","TextField","className","onBlur","onChange","autoFocus","onDoubleClick","TodolistsActionTypes","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","post","todoListId","delete","put","todolistId","taskId","model","TasksActionsTypes","initialState","changeTodolistFilterAC","filter","id","type","CHANGE_TODOLIST_FILTER","fetchTodoListsTC","dispatch","then","res","todoLists","data","SET_TODO_LISTS","deleteTodoList","REMOVE_TODOLIST","createTodoList","todoList","item","ADD_TODOLIST","updateTodoList","CHANGE_TODOLIST_TITLE","changeTodolistTitleAC","fetchTasks","TodoListId","todoListID","tasks","items","SET_TASKS","deleteTask","REMOVE_TASK","removeTaskAC","createTask","task","ADD_TASK","updateTask","domainModel","getState","find","t","Error","apiModel","description","status","priority","Low","startDate","deadline","UPDATE_TASK","updateTaskAC","listItem","Task","useDispatch","removeTask","changeTaskStatus","checked","Completed","New","newTitle","Box","Checkbox","color","IconButton","onClick","Delete","AddItemForm","addItem","placeholder","error","setError","onAddItem","itemTitle","onChangeHandler","onKeyPressHandler","key","style","marginBottom","variant","onKeyPress","helperText","label","AddBox","TodoList","useSelector","state","tl","useEffect","filterName","tasksForTodoList","useMemo","addTask","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","removeTodoList","changeTodoListTitle","s","btnGroup","Button","size","length","map","noTasksMessage","App","addTodoList","todoListTitle","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","Grid","container","padding","justify","spacing","Paper","elevation","rootReducer","combineReducers","action","newTodoList","copyState","stateCopy","forEach","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.c6af2f89.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nexport type TodolistT = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\n\ntype ResponseT<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  data: D;\n};\n\nexport enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  High = 2,\n  Later = 3,\n}\n\nexport type TaskT = {\n  description: string;\n  title: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\n\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n};\n\ntype GetTasksResponse = {\n  error: string | null;\n  totalCount: number;\n  items: Array<TaskT>;\n};\n\nconst settings = {\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"98ca0a48-2755-4c64-8a17-87fb70df4a7a\",\n  },\n};\n\nconst instance = axios.create({\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n  ...settings,\n});\n\nexport const todoListsAPI = {\n  getTodolists() {\n    return instance.get<Array<TodolistT>>(\"todo-lists\");\n  },\n\n  createTodoList(title: string) {\n    return instance.post<ResponseT<{ item: TodolistT }>>(\"todo-lists\", {\n      title,\n    });\n  },\n\n  deleteTodoList(todoListId: string) {\n    return instance.delete<ResponseT>(`todo-lists/${todoListId}`);\n  },\n\n  updateTodolist(todoListId: string, title: string) {\n    return instance.put<ResponseT>(`todo-lists/${todoListId}`, {\n      title,\n    });\n  },\n\n  getTasks(todoListId: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`);\n  },\n\n  createTask(todolistId: string, taskTitle: string) {\n    return instance.post<ResponseT<{ item: TaskT }>>(\n      `todo-lists/${todolistId}/tasks`,\n      {\n        title: taskTitle,\n      }\n    );\n  },\n\n  deleteTask(taskId: string, todoListId: string) {\n    return instance.delete<ResponseT>(\n      `todo-lists/${todoListId}/tasks/${taskId}`\n    );\n  },\n\n  updateTask(taskId: string, todoListId: string, model: UpdateTaskModelType) {\n    return instance.put<ResponseT<TaskT>>(\n      `todo-lists/${todoListId}/tasks/${taskId}`,\n      model\n    );\n  },\n};\n","import React, { ChangeEvent, useCallback, useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\ntype EditableSpanPropsType = {\n  taskTitle: string;\n  changeTitle: (newTitle: string) => void;\n};\n\nconst useStyles = makeStyles({\n  input: {\n    width: \"70%\",\n  },\n  editableSpan: {\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    maxWidth: \"70%\",\n    overflowWrap: \"anywhere\",\n  },\n});\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  const { changeTitle, taskTitle } = props;\n  const classes = useStyles();\n\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [title, setTitle] = useState<string>(taskTitle);\n\n  const onEditMode = () => setEditMode(true);\n\n  const offEditMode = useCallback(() => {\n    setEditMode(false);\n    if (title.trim()) changeTitle(title.trim());\n  }, [title, changeTitle]);\n\n  const onChangeTitle = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value),\n    []\n  );\n\n  return editMode ? (\n    <TextField\n      className={classes.input}\n      value={title}\n      onBlur={offEditMode}\n      onChange={onChangeTitle}\n      autoFocus\n    />\n  ) : (\n    <span onDoubleClick={onEditMode} className={classes.editableSpan}>\n      {taskTitle}\n    </span>\n  );\n});\n","import { todoListsAPI, TodolistT } from \"../api/todolists-api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppRootStateT } from \"./store\";\n\nexport type FilterValuesT = \"all\" | \"active\" | \"completed\";\n\nexport type TodolistDomainT = TodolistT & {\n  filter: FilterValuesT;\n};\n\nexport type TodolistReducerStateT = Array<TodolistDomainT>;\n\ntype ActionsT =\n  | RemoveTodolistAT\n  | AddTodolistAT\n  | ChangeTodolistTitleAT\n  | ChangeTodolistFilterAT\n  | SetTodoListsAT;\n\nexport enum TodolistsActionTypes {\n  SET_TODO_LISTS = \"SET-TODO-LISTS\",\n  REMOVE_TODOLIST = \"REMOVE-TODOLIST\",\n  ADD_TODOLIST = \"ADD-TODOLIST\",\n  CHANGE_TODOLIST_TITLE = \"CHANGE-TODOLIST-TITLE\",\n  CHANGE_TODOLIST_FILTER = \"CHANGE-TODOLIST-FILTER\",\n}\n\nexport type RemoveTodolistAT = {\n  type: typeof TodolistsActionTypes.REMOVE_TODOLIST;\n  id: string;\n};\nexport type AddTodolistAT = {\n  type: typeof TodolistsActionTypes.ADD_TODOLIST;\n  todoList: TodolistT;\n};\nexport type ChangeTodolistTitleAT = {\n  type: typeof TodolistsActionTypes.CHANGE_TODOLIST_TITLE;\n  id: string;\n  title: string;\n};\nexport type ChangeTodolistFilterAT = {\n  type: typeof TodolistsActionTypes.CHANGE_TODOLIST_FILTER;\n  id: string;\n  filter: FilterValuesT;\n};\nexport type SetTodoListsAT = {\n  type: typeof TodolistsActionTypes.SET_TODO_LISTS;\n  todoLists: Array<TodolistT>;\n};\n\nexport type TodoListThunkT<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppRootStateT,\n  unknown,\n  ActionsT\n>;\n\nconst initialState: TodolistReducerStateT = [];\n\nexport const todolistsReducer = (\n  state: TodolistReducerStateT = initialState,\n  action: ActionsT\n): TodolistReducerStateT => {\n  const {\n    CHANGE_TODOLIST_FILTER,\n    CHANGE_TODOLIST_TITLE,\n    ADD_TODOLIST,\n    REMOVE_TODOLIST,\n    SET_TODO_LISTS,\n  } = TodolistsActionTypes;\n\n  switch (action.type) {\n    case REMOVE_TODOLIST:\n      return state.filter((tl) => tl.id !== action.id);\n    case ADD_TODOLIST: {\n      const newTodoList: TodolistDomainT = {\n        ...action.todoList,\n        filter: \"all\",\n      };\n      return [newTodoList, ...state];\n    }\n    case CHANGE_TODOLIST_TITLE:\n      return state.map((tl) =>\n        tl.id === action.id ? { ...tl, title: action.title } : tl\n      );\n    case CHANGE_TODOLIST_FILTER:\n      return state.map((tl) =>\n        tl.id === action.id ? { ...tl, filter: action.filter } : tl\n      );\n    case SET_TODO_LISTS:\n      return action.todoLists.map((tl) => ({ ...tl, filter: \"all\" }));\n    default:\n      return state;\n  }\n};\n\n// * Action creators\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistAT => {\n  return {\n    type: TodolistsActionTypes.REMOVE_TODOLIST,\n    id: todolistId,\n  };\n};\n\nexport const addTodolistAC = (todoList: TodolistT): AddTodolistAT => {\n  return {\n    type: TodolistsActionTypes.ADD_TODOLIST,\n    todoList,\n  };\n};\n\nexport const changeTodolistTitleAC = (\n  id: string,\n  title: string\n): ChangeTodolistTitleAT => {\n  return {\n    type: TodolistsActionTypes.CHANGE_TODOLIST_TITLE,\n    title,\n    id,\n  };\n};\nexport const changeTodolistFilterAC = (\n  filter: FilterValuesT,\n  id: string\n): ChangeTodolistFilterAT => {\n  return {\n    type: TodolistsActionTypes.CHANGE_TODOLIST_FILTER,\n    id,\n    filter,\n  };\n};\n\nexport const setTodoListsAC = (todoLists: Array<TodolistT>): SetTodoListsAT => {\n  return {\n    type: TodolistsActionTypes.SET_TODO_LISTS,\n    todoLists,\n  };\n};\n\n// * Thunks\nexport const fetchTodoListsTC = (): TodoListThunkT => (dispatch) => {\n  todoListsAPI.getTodolists().then((res) => dispatch(setTodoListsAC(res.data)));\n};\n\nexport const deleteTodoList = (todoListId: string): TodoListThunkT => (\n  dispatch\n) => {\n  todoListsAPI\n    .deleteTodoList(todoListId)\n    .then(() => dispatch(removeTodolistAC(todoListId)));\n};\n\nexport const createTodoList = (title: string): TodoListThunkT => (dispatch) => {\n  todoListsAPI\n    .createTodoList(title)\n    .then((res) => dispatch(addTodolistAC(res.data.data.item)));\n};\n\nexport const updateTodoList = (\n  todoListId: string,\n  title: string\n): TodoListThunkT => (dispatch) => {\n  todoListsAPI\n    .updateTodolist(todoListId, title)\n    .then(() => dispatch(changeTodolistTitleAC(todoListId, title)));\n};\n","import {\n  AddTodolistAT,\n  RemoveTodolistAT,\n  SetTodoListsAT,\n  TodolistsActionTypes,\n} from \"./todolists-reducer\";\nimport {\n  TaskPriorities,\n  TaskStatuses,\n  TaskT,\n  todoListsAPI,\n  UpdateTaskModelType,\n} from \"../api/todolists-api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppRootStateT } from \"./store\";\n\ntype ActionsT =\n  | RemoveTaskT\n  | AddTaskT\n  | UpdateTaskT\n  /*| ChangeTaskTitleT*/\n  | AddTodolistAT\n  | RemoveTodolistAT\n  | SetTodoListsAT\n  | SetTasksAT;\n\nenum TasksActionsTypes {\n  REMOVE_TASK = \"REMOVE-TASK\",\n  ADD_TASK = \"ADD-TASK\",\n  UPDATE_TASK = \"CHANGE-TASK-STATUS\",\n  /* CHANGE_TASK_TITLE = \"CHANGE-TASK-TITLE\",*/\n  SET_TASKS = \"SET-TASKS\",\n}\n\nexport type RemoveTaskT = {\n  type: typeof TasksActionsTypes.REMOVE_TASK;\n  taskId: string;\n  todoListID: string;\n};\nexport type AddTaskT = {\n  type: typeof TasksActionsTypes.ADD_TASK;\n  task: TaskT;\n};\n\nexport type UpdateTaskT = {\n  type: typeof TasksActionsTypes.UPDATE_TASK;\n  taskId: string;\n  model: UpdateDomainTaskModelT;\n  todoListID: string;\n};\n\n/*export type ChangeTaskTitleT = {\n  type: typeof TasksActionsTypes.CHANGE_TASK_TITLE;\n  taskId: string;\n  title: string;\n  todoListID: string;\n};*/\n\nexport type SetTasksAT = {\n  type: typeof TasksActionsTypes.SET_TASKS;\n  tasks: Array<TaskT>;\n  todoListID: string;\n};\n\nexport type TasksThunkT<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppRootStateT,\n  unknown,\n  ActionsT\n>;\n\nexport type TaskStateT = {\n  [key: string]: Array<TaskT>;\n};\n\nexport type UpdateDomainTaskModelT = {\n  title?: string;\n  description?: string;\n  status?: TaskStatuses;\n  priority?: TaskPriorities;\n  startDate?: string;\n  deadline?: string;\n};\n\nconst initialState: TaskStateT = {};\n\nexport const tasksReducer = (\n  state: TaskStateT = initialState,\n  action: ActionsT\n): TaskStateT => {\n  const {\n    REMOVE_TASK,\n    ADD_TASK,\n    /*CHANGE_TASK_TITLE,*/\n    UPDATE_TASK,\n    SET_TASKS,\n  } = TasksActionsTypes;\n\n  switch (action.type) {\n    case REMOVE_TASK: {\n      let copyState = { ...state };\n      copyState[action.todoListID] = copyState[action.todoListID].filter(\n        (task) => task.id !== action.taskId\n      );\n      return copyState;\n    }\n    case ADD_TASK: {\n      const { task } = action;\n\n      return {\n        ...state,\n        [task.todoListId]: [task, ...state[task.todoListId]],\n      };\n    }\n    case UPDATE_TASK: {\n      return {\n        ...state,\n        [action.todoListID]: state[action.todoListID].map((t) =>\n          t.id === action.taskId ? { ...t, ...action.model } : t\n        ),\n      };\n    }\n    /*    case CHANGE_TASK_TITLE: {\n              return {\n                ...state,\n                [action.todoListID]: state[action.todoListID].map((t) =>\n                  t.id === action.taskId ? { ...t, title: action.title } : t\n                ),\n              };\n            }*/\n    case TodolistsActionTypes.ADD_TODOLIST: {\n      return {\n        ...state,\n        [action.todoList.id]: [],\n      };\n    }\n    case TodolistsActionTypes.REMOVE_TODOLIST: {\n      const copyState = { ...state };\n      delete copyState[action.id];\n      return copyState;\n    }\n    case TodolistsActionTypes.SET_TODO_LISTS: {\n      const stateCopy = { ...state };\n\n      action.todoLists.forEach((tl) => {\n        stateCopy[tl.id] = [];\n      });\n\n      return stateCopy;\n    }\n\n    case SET_TASKS: {\n      return {\n        ...state,\n        [action.todoListID]: action.tasks,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n// * Action Creators\nexport const removeTaskAC = (\n  taskId: string,\n  todoListID: string\n): RemoveTaskT => {\n  return {\n    type: TasksActionsTypes.REMOVE_TASK,\n    taskId,\n    todoListID,\n  };\n};\nexport const addTaskAC = (task: TaskT): AddTaskT => {\n  return {\n    type: TasksActionsTypes.ADD_TASK,\n    task,\n  };\n};\nexport const updateTaskAC = (\n  taskId: string,\n  todoListID: string,\n  model: UpdateDomainTaskModelT\n): UpdateTaskT => {\n  return {\n    type: TasksActionsTypes.UPDATE_TASK,\n    taskId,\n    todoListID,\n    model,\n  };\n};\n/*export const changeTaskTitleAC = (\n  taskId: string,\n  title: string,\n  todoListID: string\n): ChangeTaskTitleT => {\n  return {\n    type: TasksActionsTypes.CHANGE_TASK_TITLE,\n    taskId,\n    todoListID,\n    title,\n  };\n};*/\n\nexport const setTasksAC = (\n  todoListID: string,\n  tasks: Array<TaskT>\n): SetTasksAT => {\n  return {\n    type: TasksActionsTypes.SET_TASKS,\n    todoListID,\n    tasks,\n  };\n};\n\n//* Thunks\nexport const fetchTasks = (TodoListId: string): TasksThunkT => (dispatch) => {\n  todoListsAPI\n    .getTasks(TodoListId)\n    .then((res) => dispatch(setTasksAC(TodoListId, res.data.items)));\n};\n\nexport const deleteTask = (taskId: string, todoListId: string): TasksThunkT => (\n  dispatch\n) => {\n  todoListsAPI.deleteTask(taskId, todoListId).then(() => {\n    dispatch(removeTaskAC(taskId, todoListId));\n  });\n};\n\nexport const createTask = (todoListId: string, title: string): TasksThunkT => (\n  dispatch\n) => {\n  todoListsAPI\n    .createTask(todoListId, title)\n    .then((res) => dispatch(addTaskAC(res.data.data.item)));\n};\n\nexport const updateTask = (\n  taskId: string,\n  todoListId: string,\n  domainModel: UpdateDomainTaskModelT\n): TasksThunkT => (dispatch, getState) => {\n  const state = getState();\n  const task = state.tasks[todoListId].find((t) => t.id === taskId);\n\n  if (!task) {\n    throw new Error(\"Task no found in the STATE\");\n  }\n\n  const apiModel: UpdateTaskModelType = {\n    title: task.title,\n    description: task.description,\n    status: task.status,\n    priority: TaskPriorities.Low,\n    startDate: task.startDate,\n    deadline: task.deadline,\n    ...domainModel,\n  };\n\n  todoListsAPI\n    .updateTask(taskId, todoListId, apiModel)\n    .then(() => dispatch(updateTaskAC(taskId, todoListId, domainModel)));\n};\n","import React, { ChangeEvent, useCallback } from \"react\";\nimport { EditableSpan } from \"./EditableSpan\";\nimport { Box, Checkbox, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { deleteTask, updateTask } from \"./state/tasks-reducer\";\nimport { useDispatch } from \"react-redux\";\nimport { TaskStatuses, TaskT } from \"./api/todolists-api\";\n\nexport type TodoListItemType = {\n  todoListId: string;\n  task: TaskT;\n};\n\nconst useStyles = makeStyles({\n  listItem: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    maxWidth: \"250px\",\n  },\n});\n\nexport const Task: React.FC<TodoListItemType> = React.memo((props) => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const { task, todoListId } = props;\n\n  const removeTask = useCallback(() => {\n    dispatch(deleteTask(task.id, todoListId));\n  }, [dispatch, todoListId, task.id]);\n\n  const changeTaskStatus = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      const { checked } = e.currentTarget;\n      const status = checked ? TaskStatuses.Completed : TaskStatuses.New;\n\n      dispatch(updateTask(task.id, todoListId, { status }));\n    },\n    [dispatch, todoListId, task.id]\n  );\n\n  const changeTitle = useCallback(\n    (newTitle: string): void => {\n      dispatch(updateTask(task.id, todoListId, { title: newTitle }));\n    },\n    [dispatch, todoListId, task.id]\n  );\n\n  return (\n    <li\n      className={`${task.status === TaskStatuses.Completed ? \"is-done\" : \"\"} ${\n        classes.listItem\n      }`}\n    >\n      <Box>\n        <Checkbox\n          onChange={changeTaskStatus}\n          checked={task.status === TaskStatuses.Completed}\n          color={\"primary\"}\n        />\n        <EditableSpan taskTitle={task.title} changeTitle={changeTitle} />\n      </Box>\n      <IconButton onClick={removeTask}>\n        <Delete />\n      </IconButton>\n    </li>\n  );\n});\n","import React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useState,\n} from \"react\";\nimport { IconButton, TextField } from \"@material-ui/core\";\nimport { AddBox } from \"@material-ui/icons\";\n\ntype AddItemFormType = {\n  addItem: (title: string) => void;\n  placeholder?: string;\n};\n\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\n  const { addItem, placeholder } = props;\n\n  const [title, setTitle] = useState<string>(\"\");\n  const [error, setError] = useState<string | null>(null);\n\n  const onAddItem = useCallback(() => {\n    const itemTitle = title.trim();\n    if (itemTitle) {\n      addItem(itemTitle);\n    } else {\n      setError(\"Title is required!\");\n    }\n\n    setTitle(\"\");\n  }, [title, addItem]);\n\n  const onChangeHandler = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      if (error) setError(\"\");\n      setTitle(e.currentTarget.value);\n    },\n    [error]\n  );\n\n  const onKeyPressHandler = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Enter\") onAddItem();\n    },\n    [onAddItem]\n  );\n\n  return (\n    <div style={{ marginBottom: \"20px\" }}>\n      <TextField\n        variant={\"outlined\"}\n        value={title}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n        error={!!error}\n        helperText={error}\n        label={placeholder ? placeholder : \"Enter task name...\"}\n      />\n      <IconButton onClick={onAddItem} color={\"primary\"}>\n        <AddBox />\n      </IconButton>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { Task } from \"./Task\";\nimport { AddItemForm } from \"./AddItemFrom\";\nimport { EditableSpan } from \"./EditableSpan\";\nimport { IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport Button from \"@material-ui/core/Button\";\nimport s from \"./Common.module.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"./state/store\";\nimport { createTask, fetchTasks } from \"./state/tasks-reducer\";\nimport {\n  changeTodolistFilterAC,\n  deleteTodoList,\n  TodolistDomainT,\n  updateTodoList,\n} from \"./state/todolists-reducer\";\nimport { TaskStatuses, TaskT } from \"./api/todolists-api\";\n\ntype TodoListPropsType = {\n  todoListId: string;\n};\n\nexport const TodoList = React.memo((props: TodoListPropsType) => {\n  const todoList = useSelector<AppRootStateT, TodolistDomainT>(\n    (state) => state.todoLists.filter((tl) => props.todoListId === tl.id)[0]\n  );\n  const tasks = useSelector<AppRootStateT, Array<TaskT>>(\n    (state) => state.tasks[props.todoListId]\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTasks(todoList.id));\n  }, [dispatch, todoList.id]);\n\n  let tasksForTodoList = useMemo(() => {\n    if (todoList.filter === \"active\") {\n      return tasks.filter((task) => task.status === TaskStatuses.New);\n    }\n    if (todoList.filter === \"completed\") {\n      return tasks.filter((task) => task.status === TaskStatuses.Completed);\n    }\n\n    return tasks;\n  }, [todoList.filter, tasks]);\n\n  const addTask = useCallback(\n    (title: string) => {\n      dispatch(createTask(todoList.id, title));\n    },\n    [dispatch, todoList.id]\n  );\n\n  const onAllClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"all\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const onActiveClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"active\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const onCompletedClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"completed\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const removeTodoList = useCallback((): void => {\n    dispatch(deleteTodoList(todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const changeTodoListTitle = useCallback(\n    (newTitle: string) => {\n      dispatch(updateTodoList(todoList.id, newTitle));\n    },\n    [dispatch, todoList.id]\n  );\n\n  const showNoTasksMessage = (filterName: string): JSX.Element => {\n    filterName = filterName === \"all\" ? \"any\" : filterName;\n    return (\n      <span className={s.noTasksMessage}>You have no {filterName} tasks</span>\n    );\n  };\n\n  return (\n    <div>\n      <h3>\n        <EditableSpan\n          taskTitle={todoList.title}\n          changeTitle={changeTodoListTitle}\n        />\n        <IconButton onClick={removeTodoList}>\n          <Delete />\n        </IconButton>\n      </h3>\n      <AddItemForm addItem={addTask} />\n      <div className={s.btnGroup}>\n        <Button\n          variant={todoList.filter === \"all\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onAllClickHandler}\n          size={\"small\"}\n        >\n          All\n        </Button>\n        <Button\n          variant={todoList.filter === \"active\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onActiveClickHandler}\n          size={\"small\"}\n        >\n          Active\n        </Button>\n        <Button\n          variant={todoList.filter === \"completed\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onCompletedClickHandler}\n          size={\"small\"}\n        >\n          Completed\n        </Button>\n      </div>\n\n      <ul>\n        {tasksForTodoList.length\n          ? tasksForTodoList.map((task) => (\n              <Task key={task.id} todoListId={props.todoListId} task={task} />\n            ))\n          : showNoTasksMessage(todoList.filter)}\n      </ul>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect } from \"react\";\nimport \"./App.css\";\nimport { TodoList } from \"./TodoList\";\nimport { AddItemForm } from \"./AddItemFrom\";\nimport {\n  AppBar,\n  Button,\n  IconButton,\n  Typography,\n  Toolbar,\n  Container,\n  Grid,\n  Paper,\n} from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport {\n  createTodoList,\n  fetchTodoListsTC,\n  TodolistDomainT,\n} from \"./state/todolists-reducer\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"./state/store\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const todoLists = useSelector<AppRootStateT, Array<TodolistDomainT>>(\n    (state) => state.todoLists\n  );\n\n  useEffect(() => {\n    dispatch(fetchTodoListsTC());\n  }, [dispatch]);\n\n  const addTodoList = useCallback(\n    (todoListTitle: string): void => {\n      dispatch(createTodoList(todoListTitle));\n    },\n    [dispatch]\n  );\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">News</Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n\n      <Container>\n        <Grid\n          container\n          style={{ padding: \"10px\" }}\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <AddItemForm\n            addItem={addTodoList}\n            placeholder={\"Enter Todo List name...\"}\n          />\n        </Grid>\n\n        <Grid container spacing={3}>\n          {todoLists.map((todoList) => {\n            return (\n              <Grid item key={todoList.id}>\n                <Paper elevation={5} style={{ padding: \"20px 10px\" }}>\n                  <TodoList key={todoList.id} todoListId={todoList.id} />\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\nimport { todolistsReducer } from \"./todolists-reducer\";\nimport { tasksReducer } from \"./tasks-reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n  todoLists: todolistsReducer,\n  tasks: tasksReducer,\n});\n\nexport type AppRootStateT = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./state/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroup\":\"Common_btnGroup__3hj-K\",\"noTasksMessage\":\"Common_noTasksMessage__2S6NA\"};"],"sourceRoot":""}