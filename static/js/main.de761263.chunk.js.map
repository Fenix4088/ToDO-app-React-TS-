{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","components/EditableSpan/EditableSpan.tsx","app/app-reducer.ts","features/TodoLists/todolists-reducer.ts","features/TodoLists/tasks-reducer.ts","features/TodoLists/TodoList/Task/Task.tsx","components/AddItemForm/AddItemFrom.tsx","components/TasksPreloader/TaskspPreloader.tsx","features/TodoLists/TodoList/TodoList.tsx","components/ErrorSnackbar/ErrorSnackBar.tsx","app/App.tsx","app/store.ts","index.tsx","Common.module.scss"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","useStyles","makeStyles","input","width","editableSpan","display","justifyContent","alignItems","maxWidth","overflowWrap","EditableSpan","React","memo","props","changeTitle","taskTitle","classes","useState","editMode","setEditMode","title","setTitle","offEditMode","useCallback","trim","onChangeTitle","e","currentTarget","value","TextField","className","onBlur","onChange","autoFocus","onDoubleClick","appActionsConst","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","post","todoListId","delete","put","todolistId","taskId","model","TodolistsActionTypes","initialState","status","tasksLoadStatus","error","setAppErrorAC","type","APP_SET_ERROR","setAppStatusAC","APP_SET_STATUS","setTasksLoadStatusAC","APP_SET_TASK_LOAD_STATUS","TasksActionsTypes","changeTodolistFilterAC","filter","id","CHANGE_TODOLIST_FILTER","fetchTodoListsTC","dispatch","then","res","todoLists","data","SET_TODO_LISTS","deleteTodoList","entityStatus","CHANGE_TODO_LIST_ENTITY_STATUS","changeTodoListEntityStatusAC","REMOVE_TODOLIST","createTodoList","todoList","item","ADD_TODOLIST","updateTodoList","CHANGE_TODOLIST_TITLE","changeTodolistTitleAC","fetchTasks","TodoListId","todoListID","tasks","items","SET_TASKS","deleteTask","REMOVE_TASK","removeTaskAC","createTask","task","resultCode","ADD_TASK","messages","updateTask","domainModel","getState","find","t","Error","apiModel","description","priority","Low","startDate","deadline","UPDATE_TASK","updateTaskAC","listItem","Task","useDispatch","removeTask","changeTaskStatus","checked","Completed","New","newTitle","Box","Checkbox","color","IconButton","onClick","Delete","AddItemForm","disabled","addItem","placeholder","setError","onAddItem","itemTitle","onChangeHandler","onKeyPressHandler","key","style","marginBottom","variant","onKeyPress","helperText","label","AddBox","TasksPreloader","TodoList","demo","useSelector","state","tl","tasksLoadingStatus","app","useEffect","filterName","tasksForTodoList","useMemo","addTask","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","removeTodoList","changeTodoListTitle","s","btnGroup","Button","size","length","map","noTasksMessage","Alert","elevation","CustomizedSnackbars","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","appStatus","addTodoList","todoListTitle","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","Grid","container","padding","justify","spacing","Paper","rootReducer","combineReducers","action","copyState","stateCopy","forEach","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.de761263.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\n// * types\nexport type TodolistT = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\n\ntype ResponseT<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  data: D;\n};\n\nexport enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  High = 2,\n  Later = 3,\n}\n\nexport type TaskT = {\n  description: string;\n  title: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\n\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n};\n\ntype GetTasksResponse = {\n  error: string | null;\n  totalCount: number;\n  items: Array<TaskT>;\n};\n\nconst settings = {\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"98ca0a48-2755-4c64-8a17-87fb70df4a7a\",\n  },\n};\n\n// * API\nconst instance = axios.create({\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n  ...settings,\n});\n\nexport const todoListsAPI = {\n  getTodolists() {\n    return instance.get<Array<TodolistT>>(\"todo-lists\");\n  },\n\n  createTodoList(title: string) {\n    return instance.post<ResponseT<{ item: TodolistT }>>(\"todo-lists\", {\n      title,\n    });\n  },\n\n  deleteTodoList(todoListId: string) {\n    return instance.delete<ResponseT>(`todo-lists/${todoListId}`);\n  },\n\n  updateTodolist(todoListId: string, title: string) {\n    return instance.put<ResponseT>(`todo-lists/${todoListId}`, {\n      title,\n    });\n  },\n\n  getTasks(todoListId: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`);\n  },\n\n  createTask(todolistId: string, taskTitle: string) {\n    return instance.post<ResponseT<{ item: TaskT }>>(\n      `todo-lists/${todolistId}/tasks`,\n      {\n        title: taskTitle,\n      }\n    );\n  },\n\n  deleteTask(taskId: string, todoListId: string) {\n    return instance.delete<ResponseT>(\n      `todo-lists/${todoListId}/tasks/${taskId}`\n    );\n  },\n\n  updateTask(taskId: string, todoListId: string, model: UpdateTaskModelType) {\n    return instance.put<ResponseT<TaskT>>(\n      `todo-lists/${todoListId}/tasks/${taskId}`,\n      model\n    );\n  },\n};\n","import React, { ChangeEvent, useCallback, useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\ntype EditableSpanPropsType = {\n  taskTitle: string;\n  changeTitle: (newTitle: string) => void;\n};\n\nconst useStyles = makeStyles({\n  input: {\n    width: \"70%\",\n  },\n  editableSpan: {\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    maxWidth: \"70%\",\n    overflowWrap: \"anywhere\",\n  },\n});\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  const { changeTitle, taskTitle } = props;\n  const classes = useStyles();\n\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [title, setTitle] = useState<string>(taskTitle);\n\n  const onEditMode = () => setEditMode(true);\n\n  const offEditMode = useCallback(() => {\n    setEditMode(false);\n    if (title.trim()) changeTitle(title.trim());\n  }, [title, changeTitle]);\n\n  const onChangeTitle = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value),\n    []\n  );\n\n  return editMode ? (\n    <TextField\n      className={classes.input}\n      value={title}\n      onBlur={offEditMode}\n      onChange={onChangeTitle}\n      autoFocus\n    />\n  ) : (\n    <span onDoubleClick={onEditMode} className={classes.editableSpan}>\n      {taskTitle}\n    </span>\n  );\n});\n","// * types\nexport type InitialStateT = {\n    status: StatusT;\n    tasksLoadStatus: StatusT;\n    error: string | null;\n};\n\nexport type StatusT = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n\nenum appActionsConst {\n    APP_SET_STATUS = \"APP/SET-STATUS\",\n    APP_SET_ERROR = \"APP/SET-ERROR\",\n    APP_SET_TASK_LOAD_STATUS = \"APP/APP-SET-TASK-LOAD-STATUS\"\n}\n\ntype ActionsT = SetAppErrorAT | setAppStatusAT | setTasksLoadStatusAT;\n\nexport type SetAppErrorAT = ReturnType<typeof setAppErrorAC>\nexport type setAppStatusAT = ReturnType<typeof setAppStatusAC>\nexport type setTasksLoadStatusAT = ReturnType<typeof setTasksLoadStatusAC>\n\n// * reducer\nconst initialState: InitialStateT = {\n    status: \"idle\",\n    tasksLoadStatus: \"loading\",\n    error: null,\n}\n\nexport const appReducer = (state: InitialStateT = initialState, action: ActionsT): InitialStateT => {\n    const {APP_SET_STATUS, APP_SET_ERROR, APP_SET_TASK_LOAD_STATUS} = appActionsConst;\n\n    switch (action.type) {\n        case APP_SET_STATUS: {\n            return {...state, status: action.status};\n        }\n        case APP_SET_ERROR: {\n            return {...state, error: action.error};\n        }\n        case APP_SET_TASK_LOAD_STATUS: {\n            return {...state, tasksLoadStatus: action.status};\n        }\n        default:\n            return state;\n    }\n\n}\n\n// * AC\nexport const setAppErrorAC = (error: string | null) => {\n    return {\n        type: appActionsConst.APP_SET_ERROR,\n        error\n    } as const;\n}\n\nexport const setAppStatusAC = (status: StatusT) => {\n    return {\n        type: appActionsConst.APP_SET_STATUS,\n        status\n    } as const;\n}\n\nexport const setTasksLoadStatusAC = (status: StatusT) => {\n    return {\n        type: appActionsConst.APP_SET_TASK_LOAD_STATUS,\n        status\n    } as const;\n}\n\n// * TC","import { todoListsAPI, TodolistT } from \"../../api/todolists-api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppRootStateT } from \"../../app/store\";\nimport { setAppStatusAC, setAppStatusAT, StatusT } from \"../../app/app-reducer\";\n\n// * types\nexport type FilterValuesT = \"all\" | \"active\" | \"completed\";\n\nexport type TodolistDomainT = TodolistT & {\n  filter: FilterValuesT;\n  entityStatus: StatusT;\n};\n\nexport type TodolistReducerStateT = Array<TodolistDomainT>;\n\ntype ActionsT =\n  | RemoveTodolistAT\n  | AddTodolistAT\n  | ChangeTodolistTitleAT\n  | ChangeTodolistFilterAT\n  | SetTodoListsAT\n  | changeTodoListEntityStatusAT;\n\nexport enum TodolistsActionTypes {\n  SET_TODO_LISTS = \"SET-TODO-LISTS\",\n  REMOVE_TODOLIST = \"REMOVE-TODOLIST\",\n  ADD_TODOLIST = \"ADD-TODOLIST\",\n  CHANGE_TODOLIST_TITLE = \"CHANGE-TODOLIST-TITLE\",\n  CHANGE_TODOLIST_FILTER = \"CHANGE-TODOLIST-FILTER\",\n  CHANGE_TODO_LIST_ENTITY_STATUS = \"CHANGE-TODO-LIST-ENTITY-STATUS\",\n}\n\nexport type RemoveTodolistAT = ReturnType<typeof removeTodolistAC>;\nexport type AddTodolistAT = ReturnType<typeof addTodolistAC>;\nexport type ChangeTodolistTitleAT = ReturnType<typeof changeTodolistTitleAC>;\nexport type ChangeTodolistFilterAT = ReturnType<typeof changeTodolistFilterAC>;\nexport type SetTodoListsAT = ReturnType<typeof setTodoListsAC>;\nexport type changeTodoListEntityStatusAT = ReturnType<\n  typeof changeTodoListEntityStatusAC\n>;\n\nexport type TodoListThunkT<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppRootStateT,\n  unknown,\n  ActionsT | setAppStatusAT\n>;\n\n// * reducer\nconst initialState: TodolistReducerStateT = [];\n\nexport const todolistsReducer = (\n  state: TodolistReducerStateT = initialState,\n  action: ActionsT\n): TodolistReducerStateT => {\n  const {\n    CHANGE_TODOLIST_FILTER,\n    CHANGE_TODOLIST_TITLE,\n    ADD_TODOLIST,\n    REMOVE_TODOLIST,\n    SET_TODO_LISTS,\n    CHANGE_TODO_LIST_ENTITY_STATUS\n  } = TodolistsActionTypes;\n\n  switch (action.type) {\n    case REMOVE_TODOLIST:\n      return state.filter((tl) => tl.id !== action.id);\n    case ADD_TODOLIST: {\n      return [\n        {\n          ...action.todoList,\n          filter: \"all\",\n          entityStatus: \"idle\",\n        },\n        ...state,\n      ];\n    }\n    case CHANGE_TODOLIST_TITLE:\n      return state.map((tl) =>\n        tl.id === action.id ? { ...tl, title: action.title } : tl\n      );\n    case CHANGE_TODOLIST_FILTER:\n      return state.map((tl) =>\n        tl.id === action.id ? { ...tl, filter: action.filter } : tl\n      );\n    case CHANGE_TODO_LIST_ENTITY_STATUS: {\n      return state.map((tl) =>\n          tl.id === action.todoListId ? { ...tl, entityStatus: action.entityStatus } : tl\n      );\n    }\n    case SET_TODO_LISTS:\n      return action.todoLists.map((tl) => ({\n        ...tl,\n        filter: \"all\",\n        entityStatus: \"idle\",\n      }));\n    default:\n      return state;\n  }\n};\n\n// * Action creators\nexport const removeTodolistAC = (todolistId: string) => {\n  return {\n    type: TodolistsActionTypes.REMOVE_TODOLIST,\n    id: todolistId,\n  } as const;\n};\n\nexport const addTodolistAC = (todoList: TodolistT) => {\n  return {\n    type: TodolistsActionTypes.ADD_TODOLIST,\n    todoList,\n  } as const;\n};\n\nexport const changeTodolistTitleAC = (id: string, title: string) => {\n  return {\n    type: TodolistsActionTypes.CHANGE_TODOLIST_TITLE,\n    title,\n    id,\n  } as const;\n};\n\nexport const changeTodolistFilterAC = (filter: FilterValuesT, id: string) => {\n  return {\n    type: TodolistsActionTypes.CHANGE_TODOLIST_FILTER,\n    id,\n    filter,\n  } as const;\n};\n\nexport const setTodoListsAC = (todoLists: Array<TodolistT>) => {\n  return {\n    type: TodolistsActionTypes.SET_TODO_LISTS,\n    todoLists,\n  } as const;\n};\n\nexport const changeTodoListEntityStatusAC = (todoListId: string, entityStatus: StatusT) => {\n  return {\n    type: TodolistsActionTypes.CHANGE_TODO_LIST_ENTITY_STATUS,\n    entityStatus,\n    todoListId\n  } as const;\n};\n\n// * Thunks\nexport const fetchTodoListsTC = (): TodoListThunkT => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todoListsAPI.getTodolists().then((res) => {\n    dispatch(setTodoListsAC(res.data));\n    dispatch(setAppStatusAC(\"succeeded\"));\n  });\n};\n\nexport const deleteTodoList = (todoListId: string): TodoListThunkT => (\n  dispatch\n) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  dispatch(changeTodoListEntityStatusAC(todoListId, \"loading\"));\n\n  todoListsAPI.deleteTodoList(todoListId).then(() => {\n    dispatch(removeTodolistAC(todoListId));\n    dispatch(setAppStatusAC(\"succeeded\"));\n  });\n};\n\nexport const createTodoList = (title: string): TodoListThunkT => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todoListsAPI.createTodoList(title).then((res) => {\n    dispatch(addTodolistAC(res.data.data.item));\n    dispatch(setAppStatusAC(\"succeeded\"));\n  });\n};\n\nexport const updateTodoList = (\n  todoListId: string,\n  title: string\n): TodoListThunkT => (dispatch) => {\n  todoListsAPI\n    .updateTodolist(todoListId, title)\n    .then(() => dispatch(changeTodolistTitleAC(todoListId, title)));\n};\n","import {\n  AddTodolistAT,\n  RemoveTodolistAT,\n  SetTodoListsAT,\n  TodolistsActionTypes,\n} from \"./todolists-reducer\";\nimport {\n  TaskPriorities,\n  TaskStatuses,\n  TaskT,\n  todoListsAPI,\n  UpdateTaskModelType,\n} from \"../../api/todolists-api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppRootStateT } from \"../../app/store\";\nimport {\n  setAppErrorAC,\n  SetAppErrorAT, setAppStatusAT, setTasksLoadStatusAC,\n  setTasksLoadStatusAT,\n} from \"../../app/app-reducer\";\n\n// * types\ntype ActionsT =\n  | RemoveTaskAT\n  | AddTaskAT\n  | UpdateTaskAT\n  | AddTodolistAT\n  | RemoveTodolistAT\n  | SetTodoListsAT\n  | SetTasksAT;\n\nenum TasksActionsTypes {\n  REMOVE_TASK = \"REMOVE-TASK\",\n  ADD_TASK = \"ADD-TASK\",\n  UPDATE_TASK = \"CHANGE-TASK-STATUS\",\n  SET_TASKS = \"SET-TASKS\",\n}\n\nexport type RemoveTaskAT = ReturnType<typeof removeTaskAC>;\nexport type AddTaskAT = ReturnType<typeof addTaskAC>;\nexport type UpdateTaskAT = ReturnType<typeof updateTaskAC>;\nexport type SetTasksAT = ReturnType<typeof setTasksAC>;\n\nexport type TasksThunkT<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppRootStateT,\n  unknown,\n  ActionsT | SetAppErrorAT | setTasksLoadStatusAT\n>;\n\nexport type TaskStateT = {\n  [key: string]: Array<TaskT>;\n};\n\nexport type UpdateDomainTaskModelT = {\n  title?: string;\n  description?: string;\n  status?: TaskStatuses;\n  priority?: TaskPriorities;\n  startDate?: string;\n  deadline?: string;\n};\n\n// * reducer\nconst initialState: TaskStateT = {};\n\nexport const tasksReducer = (\n  state: TaskStateT = initialState,\n  action: ActionsT\n): TaskStateT => {\n  const { REMOVE_TASK, ADD_TASK, UPDATE_TASK, SET_TASKS } = TasksActionsTypes;\n\n  switch (action.type) {\n    case REMOVE_TASK: {\n      return {\n        ...state,\n        [action.todoListID]: state[action.todoListID].filter(\n          (task) => task.id !== action.taskId\n        ),\n      };\n    }\n    case ADD_TASK: {\n      const { task } = action;\n      return {\n        ...state,\n        [task.todoListId]: [task, ...state[task.todoListId]],\n      };\n    }\n    case UPDATE_TASK: {\n      return {\n        ...state,\n        [action.todoListID]: state[action.todoListID].map((t) =>\n          t.id === action.taskId ? { ...t, ...action.model } : t\n        ),\n      };\n    }\n    case TodolistsActionTypes.ADD_TODOLIST: {\n      return {\n        ...state,\n        [action.todoList.id]: [],\n      };\n    }\n    case TodolistsActionTypes.REMOVE_TODOLIST: {\n      const copyState = { ...state };\n      delete copyState[action.id];\n      return copyState;\n    }\n    case TodolistsActionTypes.SET_TODO_LISTS: {\n      const stateCopy = { ...state };\n      action.todoLists.forEach((tl) => {\n        stateCopy[tl.id] = [];\n      });\n\n      return stateCopy;\n    }\n    case SET_TASKS: {\n      return {\n        ...state,\n        [action.todoListID]: action.tasks,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n// * Action Creators\nexport const removeTaskAC = (taskId: string, todoListID: string) => {\n  return {\n    type: TasksActionsTypes.REMOVE_TASK,\n    taskId,\n    todoListID,\n  } as const;\n};\n\nexport const addTaskAC = (task: TaskT) => {\n  return {\n    type: TasksActionsTypes.ADD_TASK,\n    task,\n  } as const;\n};\n\nexport const updateTaskAC = (\n  taskId: string,\n  todoListID: string,\n  model: UpdateDomainTaskModelT\n) => {\n  return {\n    type: TasksActionsTypes.UPDATE_TASK,\n    taskId,\n    todoListID,\n    model,\n  } as const;\n};\n\nexport const setTasksAC = (todoListID: string, tasks: Array<TaskT>) => {\n  return {\n    type: TasksActionsTypes.SET_TASKS,\n    todoListID,\n    tasks,\n  } as const;\n};\n\n//* Thunks\nexport const fetchTasks = (TodoListId: string): TasksThunkT => (dispatch) => {\n  dispatch(setTasksLoadStatusAC(\"loading\"));\n  todoListsAPI\n    .getTasks(TodoListId)\n    .then((res) => {\n      dispatch(setTasksAC(TodoListId, res.data.items));\n      dispatch(setTasksLoadStatusAC(\"idle\"));\n    });\n};\n\nexport const deleteTask = (taskId: string, todoListId: string): TasksThunkT => (\n  dispatch\n) => {\n  dispatch(setTasksLoadStatusAC(\"loading\"));\n  todoListsAPI.deleteTask(taskId, todoListId).then(() => {\n    dispatch(removeTaskAC(taskId, todoListId));\n    dispatch(setTasksLoadStatusAC(\"succeeded\"));\n  });\n};\n\nexport const createTask = (todoListId: string, title: string): TasksThunkT => (\n  dispatch\n) => {\n  dispatch(setTasksLoadStatusAC(\"loading\"));\n  todoListsAPI.createTask(todoListId, title).then((res) => {\n    if (res.data.resultCode === 0) {\n      dispatch(addTaskAC(res.data.data.item));\n      dispatch(setTasksLoadStatusAC(\"succeeded\"));\n    } else {\n      if (res.data.messages[0]) {\n        dispatch(setAppErrorAC(res.data.messages[0]));\n      } else {\n        dispatch(setAppErrorAC(\"Unknown error :-(\"));\n      }\n      dispatch(setTasksLoadStatusAC(\"failed\"));\n    }\n  });\n};\n\nexport const updateTask = (\n  taskId: string,\n  todoListId: string,\n  domainModel: UpdateDomainTaskModelT\n): TasksThunkT => (dispatch, getState) => {\n  const state = getState();\n  const task = state.tasks[todoListId].find((t) => t.id === taskId);\n\n  if (!task) {\n    throw new Error(\"Task no found in the STATE\");\n  }\n\n  const apiModel: UpdateTaskModelType = {\n    title: task.title,\n    description: task.description,\n    status: task.status,\n    priority: TaskPriorities.Low,\n    startDate: task.startDate,\n    deadline: task.deadline,\n    ...domainModel,\n  };\n\n  todoListsAPI\n    .updateTask(taskId, todoListId, apiModel)\n    .then(() => dispatch(updateTaskAC(taskId, todoListId, domainModel)));\n};\n","import React, { ChangeEvent, useCallback } from \"react\";\nimport { EditableSpan } from \"../../../../components/EditableSpan/EditableSpan\";\nimport { Box, Checkbox, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { deleteTask, updateTask } from \"../../tasks-reducer\";\nimport { useDispatch } from \"react-redux\";\nimport { TaskStatuses, TaskT } from \"../../../../api/todolists-api\";\n\nexport type TodoListItemType = {\n  todoListId: string;\n  task: TaskT;\n};\n\nconst useStyles = makeStyles({\n  listItem: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    maxWidth: \"250px\",\n  },\n});\n\nexport const Task: React.FC<TodoListItemType> = React.memo((props) => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const { task, todoListId } = props;\n\n  const removeTask = useCallback(() => {\n    dispatch(deleteTask(task.id, todoListId));\n  }, [dispatch, todoListId, task.id]);\n\n  const changeTaskStatus = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      const { checked } = e.currentTarget;\n      const status = checked ? TaskStatuses.Completed : TaskStatuses.New;\n\n      dispatch(updateTask(task.id, todoListId, { status }));\n    },\n    [dispatch, todoListId, task.id]\n  );\n\n  const changeTitle = useCallback(\n    (newTitle: string): void => {\n      dispatch(updateTask(task.id, todoListId, { title: newTitle }));\n    },\n    [dispatch, todoListId, task.id]\n  );\n\n  return (\n    <li\n      className={`${task.status === TaskStatuses.Completed ? \"is-done\" : \"\"} ${\n        classes.listItem\n      }`}\n    >\n      <Box>\n        <Checkbox\n          onChange={changeTaskStatus}\n          checked={task.status === TaskStatuses.Completed}\n          color={\"primary\"}\n        />\n        <EditableSpan taskTitle={task.title} changeTitle={changeTitle} />\n      </Box>\n      <IconButton onClick={removeTask}>\n        <Delete />\n      </IconButton>\n    </li>\n  );\n});\n","import React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useState,\n} from \"react\";\nimport { IconButton, TextField } from \"@material-ui/core\";\nimport { AddBox } from \"@material-ui/icons\";\n\ntype AddItemFormType = {\n  addItem: (title: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n};\n\nexport const AddItemForm = React.memo(({ disabled = false, ...props }: AddItemFormType) => {\n  const { addItem, placeholder } = props;\n\n  const [title, setTitle] = useState<string>(\"\");\n  const [error, setError] = useState<string | null>(null);\n\n  const onAddItem = useCallback(() => {\n    const itemTitle = title.trim();\n    if (itemTitle) {\n      addItem(itemTitle);\n    } else {\n      setError(\"Title is required!\");\n    }\n\n    setTitle(\"\");\n  }, [title, addItem]);\n\n  const onChangeHandler = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      if (error) setError(\"\");\n      setTitle(e.currentTarget.value);\n    },\n    [error]\n  );\n\n  const onKeyPressHandler = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Enter\") onAddItem();\n    },\n    [onAddItem]\n  );\n\n  return (\n    <div style={{ marginBottom: \"20px\" }}>\n      <TextField\n          disabled={disabled}\n        variant={\"outlined\"}\n        value={title}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n        error={!!error}\n        helperText={error}\n        label={placeholder ? placeholder : \"Enter task name...\"}\n      />\n      <IconButton onClick={onAddItem} color={\"primary\"} disabled={disabled}>\n        <AddBox />\n      </IconButton>\n    </div>\n  );\n});\n","import {useLoading, BallTriangle} from '@agney/react-loading';\r\nimport React, {CSSProperties} from \"react\";\r\n\r\nexport function TasksPreloader() {\r\n    const preloaderStyle: CSSProperties = {\r\n        \"width\":\"100px\",\r\n        \"color\":\"#dc004e\",\r\n        \"margin\": \"20px auto 0\"\r\n    }\r\n\r\n    return (\r\n    <section style={preloaderStyle}>\r\n        <BallTriangle/>\r\n    </section>\r\n);\r\n}","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { Task } from \"./Task/Task\";\nimport { AddItemForm } from \"../../../components/AddItemForm/AddItemFrom\";\nimport { EditableSpan } from \"../../../components/EditableSpan/EditableSpan\";\nimport { AppBar, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport Button from \"@material-ui/core/Button\";\nimport s from \"../../../Common.module.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"../../../app/store\";\nimport { createTask, fetchTasks } from \"../tasks-reducer\";\nimport {\n  changeTodolistFilterAC,\n  deleteTodoList,\n  TodolistDomainT,\n  updateTodoList,\n} from \"../todolists-reducer\";\nimport { TaskStatuses, TaskT } from \"../../../api/todolists-api\";\nimport { TasksPreloader } from \"../../../components/TasksPreloader/TaskspPreloader\";\nimport { StatusT } from \"../../../app/app-reducer\";\n\ntype TodoListPropsType = {\n  todoListId: string;\n  demo?: boolean;\n};\n\nexport const TodoList = React.memo(({ demo = false, ...props} : TodoListPropsType) => {\n\n  const todoList = useSelector<AppRootStateT, TodolistDomainT>(\n    (state) => state.todoLists.filter((tl) => props.todoListId === tl.id)[0]\n  );\n  const tasks = useSelector<AppRootStateT, Array<TaskT>>(\n    (state) => state.tasks[props.todoListId]\n  );\n\n  const tasksLoadingStatus = useSelector<AppRootStateT, StatusT>(\n    (state) => state.app.tasksLoadStatus\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if(demo) return;\n\n    dispatch(fetchTasks(todoList.id));\n\n  }, [dispatch, todoList.id]);\n\n  let tasksForTodoList = useMemo(() => {\n    if (todoList.filter === \"active\") {\n      return tasks.filter((task) => task.status === TaskStatuses.New);\n    }\n    if (todoList.filter === \"completed\") {\n      return tasks.filter((task) => task.status === TaskStatuses.Completed);\n    }\n\n    return tasks;\n  }, [todoList.filter, tasks]);\n\n  const addTask = useCallback(\n    (title: string) => {\n      dispatch(createTask(todoList.id, title));\n    },\n    [dispatch, todoList.id]\n  );\n\n  const onAllClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"all\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const onActiveClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"active\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const onCompletedClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"completed\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const removeTodoList = useCallback((): void => {\n    dispatch(deleteTodoList(todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const changeTodoListTitle = useCallback(\n    (newTitle: string) => {\n      dispatch(updateTodoList(todoList.id, newTitle));\n    },\n    [dispatch, todoList.id]\n  );\n\n  const showNoTasksMessage = (filterName: string): JSX.Element => {\n    filterName = filterName === \"all\" ? \"any\" : filterName;\n    return (\n      <span className={s.noTasksMessage}>You have no {filterName} tasks</span>\n    );\n  };\n\n  return (\n    <div>\n      <h3>\n        <EditableSpan\n          taskTitle={todoList.title}\n          changeTitle={changeTodoListTitle}\n        />\n        <IconButton onClick={removeTodoList} disabled={todoList.entityStatus === \"loading\"}>\n          <Delete />\n        </IconButton>\n      </h3>\n      <AddItemForm addItem={addTask} disabled={todoList.entityStatus === \"loading\"}/>\n      <div className={s.btnGroup}>\n        <Button\n          variant={todoList.filter === \"all\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onAllClickHandler}\n          size={\"small\"}\n        >\n          All\n        </Button>\n        <Button\n          variant={todoList.filter === \"active\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onActiveClickHandler}\n          size={\"small\"}\n        >\n          Active\n        </Button>\n        <Button\n          variant={todoList.filter === \"completed\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onCompletedClickHandler}\n          size={\"small\"}\n        >\n          Completed\n        </Button>\n      </div>\n      {tasksLoadingStatus === \"loading\" ? (\n        <TasksPreloader />\n      ) : (\n        <ul>\n          {tasksForTodoList.length\n            ? tasksForTodoList.map((task) => (\n                <Task key={task.id} todoListId={props.todoListId} task={task} />\n              ))\n            : showNoTasksMessage(todoList.filter)}\n        </ul>\n      )}\n    </div>\n  );\n});\n","import React from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"../../app/store\";\nimport { setAppErrorAC } from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport function CustomizedSnackbars() {\n  const error = useSelector<AppRootStateT, string | null>(\n    (state) => state.app.error\n  );\n  const dispatch = useDispatch();\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    dispatch(setAppErrorAC(null));\n  };\n\n  return (\n    <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\">\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n}\n","import React, { useCallback, useEffect } from \"react\";\nimport \"./App.css\";\nimport { TodoList } from \"../features/TodoLists/TodoList/TodoList\";\nimport { AddItemForm } from \"../components/AddItemForm/AddItemFrom\";\nimport {\n  AppBar,\n  Button,\n  IconButton,\n  Typography,\n  Toolbar,\n  Container,\n  Grid,\n  Paper, LinearProgress,\n} from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport {\n  createTodoList,\n  fetchTodoListsTC,\n  TodolistDomainT,\n} from \"../features/TodoLists/todolists-reducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"./store\";\nimport {CustomizedSnackbars} from \"../components/ErrorSnackbar/ErrorSnackBar\";\nimport {StatusT} from \"./app-reducer\";\n\ntype AppPropsT = {\n  demo?: boolean;\n}\n\nfunction App({demo = false, ...props}: AppPropsT) {\n  const todoLists = useSelector<AppRootStateT, Array<TodolistDomainT>>(\n    (state) => state.todoLists\n  );\n  const appStatus = useSelector<AppRootStateT, StatusT>(state => state.app.status)\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if(demo) return;\n    dispatch(fetchTodoListsTC());\n  }, [dispatch]);\n\n  const addTodoList = useCallback(\n    (todoListTitle: string): void => {\n      dispatch(createTodoList(todoListTitle));\n    },\n    [dispatch]\n  );\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">News</Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n        {appStatus === \"loading\" && <LinearProgress color=\"secondary\"/>}\n\n        <CustomizedSnackbars/>\n      </AppBar>\n\n      <Container>\n        <Grid\n          container\n          style={{ padding: \"10px\" }}\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <AddItemForm\n            addItem={addTodoList}\n            placeholder={\"Enter Todo List name...\"}\n          />\n        </Grid>\n\n        <Grid container spacing={3}>\n          {todoLists.map((todoList) => {\n            return (\n              <Grid item key={todoList.id}>\n                <Paper elevation={5} style={{ padding: \"20px 10px\" }}>\n                  <TodoList demo={demo} key={todoList.id} todoListId={todoList.id} />\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\nimport { todolistsReducer } from \"../features/TodoLists/todolists-reducer\";\nimport { tasksReducer } from \"../features/TodoLists/tasks-reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from 'redux-thunk';\nimport {appReducer} from \"./app-reducer\";\n\nconst rootReducer = combineReducers({\n  todoLists: todolistsReducer,\n  tasks: tasksReducer,\n  app: appReducer\n});\n\nexport type AppRootStateT = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./app/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroup\":\"Common_btnGroup__3hj-K\",\"noTasksMessage\":\"Common_noTasksMessage__2S6NA\"};"],"sourceRoot":""}