{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","components/EditableSpan/EditableSpan.tsx","app/app-reducer.ts","features/TodoLists/todolists-reducer.ts","utils/error-utils.ts","features/TodoLists/tasks-reducer.ts","components/TasksPreloader/TasksPreloader.tsx","features/TodoLists/TodoList/Task/Task.tsx","components/AddItemForm/AddItemFrom.tsx","features/TodoLists/TodoList/TodoList.tsx","components/ErrorSnackbar/ErrorSnackBar.tsx","app/App.tsx","app/store.ts","index.tsx","Common.module.scss"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","EditableSpan","React","memo","props","useStyles","makeStyles","input","width","editableSpan","display","justifyContent","alignItems","maxWidth","overflowWrap","opacity","disabled","changeTitle","taskTitle","classes","useState","editMode","setEditMode","title","setTitle","offEditMode","useCallback","trim","onChangeTitle","e","currentTarget","value","TextField","className","onBlur","onChange","autoFocus","onDoubleClick","appActionsConst","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","post","todoListId","delete","put","todolistId","taskId","model","TodolistsActionTypes","initialState","status","appActionStatus","error","success","setAppErrorAC","type","APP_SET_ERROR","setAppStatusAC","APP_SET_STATUS","setAppSuccessAC","APP_SET_SUCCESS","handleServerAppError","data","dispatch","messages","handleServerNetworkError","err","message","TasksActionsTypes","changeTodolistFilterAC","filter","id","CHANGE_TODOLIST_FILTER","changeTodoListEntityStatusAC","entityStatus","CHANGE_TODO_LIST_ENTITY_STATUS","fetchTodoListsTC","then","res","todoLists","SET_TODO_LISTS","catch","deleteTodoList","REMOVE_TODOLIST","createTodoList","todoList","item","ADD_TODOLIST","updateTodoList","CHANGE_TODOLIST_TITLE","changeTodolistTitleAC","setTaskLoadingStatusAC","todoListID","taskLoadingStatus","SET_TASK_LOADING_STATUS","fetchTasks","tasks","items","SET_TASKS","deleteTask","REMOVE_TASK","removeTaskAC","createTask","task","resultCode","ADD_TASK","updateTask","domainModel","getState","find","t","Error","apiModel","description","priority","Low","startDate","deadline","UPDATE_TASK","updateTaskAC","TasksPreloader","size","preloaderTriangleStyle","color","margin","preloaderCircleStyle","position","left","top","style","listItem","Task","useDispatch","removeTask","changeTaskStatus","checked","Completed","New","newTitle","Box","entityTaskStatus","Checkbox","IconButton","onClick","Delete","AddItemForm","addItem","placeholder","setError","onAddItem","itemTitle","onChangeHandler","onKeyPressHandler","key","marginBottom","variant","onKeyPress","helperText","label","AddBox","TodoList","demo","useSelector","state","tl","useEffect","filterName","tasksForTodoList","useMemo","addTask","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","removeTodoList","changeTodoListTitle","s","btnGroup","Button","length","map","noTasksMessage","Alert","elevation","CustomizedSnackbars","app","snackbarType","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","appStatus","addTodoList","todoListTitle","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","Grid","container","padding","justify","spacing","Paper","rootReducer","combineReducers","action","copyState","stateCopy","forEach","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","module","exports"],"mappings":"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","file":"static/js/main.e421fef8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\n// * types\nexport type TodolistT = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\n\nexport type ResponseT<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  data: D;\n};\n\nexport enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  High = 2,\n  Later = 3,\n}\n\nexport type TaskT = {\n  description: string;\n  title: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\n\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n};\n\ntype GetTasksResponse = {\n  error: string | null;\n  totalCount: number;\n  items: Array<TaskT>;\n};\n\nconst settings = {\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"98ca0a48-2755-4c64-8a17-87fb70df4a7a\",\n  },\n};\n\n// * API\nconst instance = axios.create({\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n  ...settings,\n});\n\nexport const todoListsAPI = {\n  getTodolists() {\n    return instance.get<Array<TodolistT>>(\"todo-lists\");\n  },\n\n  createTodoList(title: string) {\n    return instance.post<ResponseT<{ item: TodolistT }>>(\"todo-lists\", {\n      title,\n    });\n  },\n\n  deleteTodoList(todoListId: string) {\n    return instance.delete<ResponseT>(`todo-lists/${todoListId}`);\n  },\n\n  updateTodolist(todoListId: string, title: string) {\n    return instance.put<ResponseT>(`todo-lists/${todoListId}`, {\n      title,\n    });\n  },\n\n  getTasks(todoListId: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`);\n  },\n\n  createTask(todolistId: string, taskTitle: string) {\n    return instance.post<ResponseT<{ item: TaskT }>>(\n      `todo-lists/${todolistId}/tasks`,\n      {\n        title: taskTitle,\n      }\n    );\n  },\n\n  deleteTask(taskId: string, todoListId: string) {\n    return instance.delete<ResponseT>(\n      `todo-lists/${todoListId}/tasks/${taskId}`\n    );\n  },\n\n  updateTask(taskId: string, todoListId: string, model: UpdateTaskModelType) {\n    return instance.put<ResponseT<TaskT>>(\n      `todo-lists/${todoListId}/tasks/${taskId}`,\n      model\n    );\n  },\n};\n","import React, { ChangeEvent, useCallback, useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\ntype EditableSpanPropsType = {\n  taskTitle: string;\n  changeTitle: (newTitle: string) => void;\n  disabled?: boolean\n};\n\n\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  const useStyles = makeStyles({\n    input: {\n      width: \"70%\",\n    },\n    editableSpan: {\n      display: \"inline-flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      maxWidth: \"70%\",\n      overflowWrap: \"anywhere\",\n      opacity: `${props.disabled ? \"0.5\" : \"1\"}`\n    },\n  });\n\n\n  const { changeTitle, taskTitle } = props;\n  const classes = useStyles();\n\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [title, setTitle] = useState<string>(taskTitle);\n\n  const onEditMode = () => {\n    if(props.disabled) return;\n    setEditMode(true);\n  };\n\n  const offEditMode = useCallback(() => {\n    setEditMode(false);\n    if (title.trim()) changeTitle(title.trim());\n  }, [title, changeTitle]);\n\n  const onChangeTitle = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value),\n    []\n  );\n\n  return editMode ? (\n    <TextField\n      className={classes.input}\n      value={title}\n      onBlur={offEditMode}\n      onChange={onChangeTitle}\n      autoFocus\n    />\n  ) : (\n    <span onDoubleClick={onEditMode} className={classes.editableSpan} >\n      {taskTitle}\n    </span>\n  );\n});\n","// * types\nexport type InitialStateT = {\n  status: StatusT;\n  appActionStatus: appActionStatusT;\n};\n\nexport type appActionStatusT = {\n  error: string | null;\n  success: string | null;\n};\n\nexport type StatusT = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n\nenum appActionsConst {\n  APP_SET_STATUS = \"APP/SET-STATUS\",\n  APP_SET_ERROR = \"APP/SET-ERROR\",\n  APP_SET_SUCCESS = \"APP/SET-SUCCESS\",\n}\n\ntype ActionsT = SetAppErrorAT | setAppStatusAT | setAppSuccessAT;\n\nexport type SetAppErrorAT = ReturnType<typeof setAppErrorAC>;\nexport type setAppStatusAT = ReturnType<typeof setAppStatusAC>;\nexport type setAppSuccessAT = ReturnType<typeof setAppSuccessAC>;\n\n// * reducer\nconst initialState: InitialStateT = {\n  status: \"idle\",\n  appActionStatus: {\n    error: null,\n    success: null,\n  },\n};\n\nexport const appReducer = (\n  state: InitialStateT = initialState,\n  action: ActionsT\n): InitialStateT => {\n  const { APP_SET_STATUS, APP_SET_ERROR, APP_SET_SUCCESS } = appActionsConst;\n\n  switch (action.type) {\n    case APP_SET_STATUS: {\n      return { ...state, status: action.status };\n    }\n    case APP_SET_ERROR: {\n      return {\n        ...state,\n        appActionStatus: {\n          ...state.appActionStatus,\n          error: action.error,\n          success: null,\n        },\n      };\n    }\n    case APP_SET_SUCCESS: {\n      return {\n        ...state,\n        appActionStatus: {\n          ...state.appActionStatus,\n          error: null,\n          success: action.success,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n// * AC\nexport const setAppErrorAC = (error: string | null) => {\n  return {\n    type: appActionsConst.APP_SET_ERROR,\n    error,\n  } as const;\n};\n\nexport const setAppStatusAC = (status: StatusT) => {\n  return {\n    type: appActionsConst.APP_SET_STATUS,\n    status,\n  } as const;\n};\n\nexport const setAppSuccessAC = (success: string | null) => {\n  return {\n    type: appActionsConst.APP_SET_SUCCESS,\n    success,\n  } as const;\n};\n\n// * TC\n","import { todoListsAPI, TodolistT } from \"../../api/todolists-api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppRootStateT } from \"../../app/store\";\nimport {\n  setAppStatusAC,\n  setAppStatusAT,\n  setAppSuccessAC,\n  setAppSuccessAT,\n  StatusT,\n} from \"../../app/app-reducer\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\n\n// * types\nexport type FilterValuesT = \"all\" | \"active\" | \"completed\";\n\nexport type TodolistDomainT = TodolistT & {\n  filter: FilterValuesT;\n  entityStatus: StatusT;\n};\n\nexport type TodolistReducerStateT = Array<TodolistDomainT>;\n\ntype ActionsT =\n  | RemoveTodolistAT\n  | AddTodolistAT\n  | ChangeTodolistTitleAT\n  | ChangeTodolistFilterAT\n  | SetTodoListsAT\n  | changeTodoListEntityStatusAT;\n\nexport enum TodolistsActionTypes {\n  SET_TODO_LISTS = \"SET-TODO-LISTS\",\n  REMOVE_TODOLIST = \"REMOVE-TODOLIST\",\n  ADD_TODOLIST = \"ADD-TODOLIST\",\n  CHANGE_TODOLIST_TITLE = \"CHANGE-TODOLIST-TITLE\",\n  CHANGE_TODOLIST_FILTER = \"CHANGE-TODOLIST-FILTER\",\n  CHANGE_TODO_LIST_ENTITY_STATUS = \"CHANGE-TODO-LIST-ENTITY-STATUS\",\n}\n\nexport type RemoveTodolistAT = ReturnType<typeof removeTodolistAC>;\nexport type AddTodolistAT = ReturnType<typeof addTodolistAC>;\nexport type ChangeTodolistTitleAT = ReturnType<typeof changeTodolistTitleAC>;\nexport type ChangeTodolistFilterAT = ReturnType<typeof changeTodolistFilterAC>;\nexport type SetTodoListsAT = ReturnType<typeof setTodoListsAC>;\nexport type changeTodoListEntityStatusAT = ReturnType<\n  typeof changeTodoListEntityStatusAC\n>;\n\nexport type TodoListThunkT<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppRootStateT,\n  unknown,\n  ActionsT | setAppStatusAT | setAppSuccessAT\n>;\n\n// * reducer\nconst initialState: TodolistReducerStateT = [];\n\nexport const todolistsReducer = (\n  state: TodolistReducerStateT = initialState,\n  action: ActionsT\n): TodolistReducerStateT => {\n  const {\n    CHANGE_TODOLIST_FILTER,\n    CHANGE_TODOLIST_TITLE,\n    ADD_TODOLIST,\n    REMOVE_TODOLIST,\n    SET_TODO_LISTS,\n    CHANGE_TODO_LIST_ENTITY_STATUS,\n  } = TodolistsActionTypes;\n\n  switch (action.type) {\n    case REMOVE_TODOLIST:\n      return state.filter((tl) => tl.id !== action.id);\n    case ADD_TODOLIST: {\n      return [\n        {\n          ...action.todoList,\n          filter: \"all\",\n          entityStatus: \"idle\",\n        },\n        ...state,\n      ];\n    }\n    case CHANGE_TODOLIST_TITLE:\n      return state.map((tl) =>\n        tl.id === action.id ? { ...tl, title: action.title } : tl\n      );\n    case CHANGE_TODOLIST_FILTER:\n      return state.map((tl) =>\n        tl.id === action.id ? { ...tl, filter: action.filter } : tl\n      );\n    case CHANGE_TODO_LIST_ENTITY_STATUS: {\n      return state.map((tl) =>\n        tl.id === action.todoListId\n          ? { ...tl, entityStatus: action.entityStatus }\n          : tl\n      );\n    }\n    case SET_TODO_LISTS:\n      return action.todoLists.map((tl) => ({\n        ...tl,\n        filter: \"all\",\n        entityStatus: \"idle\",\n      }));\n    default:\n      return state;\n  }\n};\n\n// * Action creators\nexport const removeTodolistAC = (todolistId: string) => {\n  return {\n    type: TodolistsActionTypes.REMOVE_TODOLIST,\n    id: todolistId,\n  } as const;\n};\n\nexport const addTodolistAC = (todoList: TodolistT) => {\n  return {\n    type: TodolistsActionTypes.ADD_TODOLIST,\n    todoList,\n  } as const;\n};\n\nexport const changeTodolistTitleAC = (id: string, title: string) => {\n  return {\n    type: TodolistsActionTypes.CHANGE_TODOLIST_TITLE,\n    title,\n    id,\n  } as const;\n};\n\nexport const changeTodolistFilterAC = (filter: FilterValuesT, id: string) => {\n  return {\n    type: TodolistsActionTypes.CHANGE_TODOLIST_FILTER,\n    id,\n    filter,\n  } as const;\n};\n\nexport const setTodoListsAC = (todoLists: Array<TodolistT>) => {\n  return {\n    type: TodolistsActionTypes.SET_TODO_LISTS,\n    todoLists,\n  } as const;\n};\n\nexport const changeTodoListEntityStatusAC = (\n  todoListId: string,\n  entityStatus: StatusT\n) => {\n  return {\n    type: TodolistsActionTypes.CHANGE_TODO_LIST_ENTITY_STATUS,\n    entityStatus,\n    todoListId,\n  } as const;\n};\n\n// * Thunks\nexport const fetchTodoListsTC = (): TodoListThunkT => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todoListsAPI\n    .getTodolists()\n    .then((res) => {\n      dispatch(setTodoListsAC(res.data));\n      dispatch(setAppStatusAC(\"succeeded\"));\n    })\n    .catch((err) => {\n      handleServerNetworkError(err, dispatch);\n    });\n};\n\nexport const deleteTodoList = (todoListId: string): TodoListThunkT => (\n  dispatch\n) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  dispatch(changeTodoListEntityStatusAC(todoListId, \"loading\"));\n\n  todoListsAPI\n    .deleteTodoList(todoListId)\n    .then(() => {\n      dispatch(removeTodolistAC(todoListId));\n      dispatch(setAppStatusAC(\"succeeded\"));\n      dispatch(setAppSuccessAC(\"Todolist was deleted!\"));\n    })\n    .catch((err) => {\n      handleServerNetworkError(err, dispatch);\n    });\n};\n\nexport const createTodoList = (title: string): TodoListThunkT => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  todoListsAPI\n    .createTodoList(title)\n    .then((res) => {\n      dispatch(addTodolistAC(res.data.data.item));\n      dispatch(setAppStatusAC(\"succeeded\"));\n      dispatch(setAppSuccessAC(\"Todolist was added!\"));\n    })\n    .catch((err) => {\n      handleServerNetworkError(err, dispatch);\n    });\n};\n\nexport const updateTodoList = (\n  todoListId: string,\n  title: string\n): TodoListThunkT => (dispatch) => {\n  todoListsAPI\n    .updateTodolist(todoListId, title)\n    .then(() => {\n      dispatch(changeTodolistTitleAC(todoListId, title));\n      dispatch(setAppSuccessAC(\"Todolist was updated!\"));\n    })\n    .catch((err) => {\n      handleServerNetworkError(err, dispatch);\n    });\n};\n","import {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\nimport {ResponseT} from \"../api/todolists-api\";\nimport {Dispatch} from \"redux\";\n\nexport const handleServerAppError = <D>(data: ResponseT<D>, dispatch: Dispatch):void => {\n    if (data.messages[0]) {\n        dispatch(setAppErrorAC(data.messages[0]));\n    } else {\n        dispatch(setAppErrorAC(\"Unknown error :-(\"));\n    }\n    dispatch(setAppStatusAC(\"failed\"));\n}\n\nexport const handleServerNetworkError = (err: {message: string}, dispatch: Dispatch):void => {\n    dispatch(setAppErrorAC(err.message ? err.message : \"Unknown error!\" ));\n    dispatch(setAppStatusAC(\"failed\"));\n}","import {\n  AddTodolistAT,\n  changeTodoListEntityStatusAC,\n  changeTodoListEntityStatusAT,\n  RemoveTodolistAT,\n  SetTodoListsAT,\n  TodolistsActionTypes,\n} from \"./todolists-reducer\";\nimport {\n  TaskPriorities,\n  TaskStatuses,\n  TaskT,\n  todoListsAPI,\n  UpdateTaskModelType,\n} from \"../../api/todolists-api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppRootStateT } from \"../../app/store\";\nimport {\n  SetAppErrorAT,\n  setAppStatusAC,\n  setAppStatusAT,\n  setAppSuccessAC,\n  setAppSuccessAT,\n  StatusT,\n} from \"../../app/app-reducer\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\n\n// * types\ntype ActionsT =\n  | RemoveTaskAT\n  | AddTaskAT\n  | UpdateTaskAT\n  | AddTodolistAT\n  | RemoveTodolistAT\n  | SetTodoListsAT\n  | SetTasksAT\n  | setTaskLoadingStatusAT;\n\nenum TasksActionsTypes {\n  REMOVE_TASK = \"REMOVE-TASK\",\n  ADD_TASK = \"ADD-TASK\",\n  UPDATE_TASK = \"CHANGE-TASK-STATUS\",\n  SET_TASKS = \"SET-TASKS\",\n  SET_TASK_LOADING_STATUS = \"SET-TASK-LOADING-STATUS\",\n}\n\nexport type RemoveTaskAT = ReturnType<typeof removeTaskAC>;\nexport type AddTaskAT = ReturnType<typeof addTaskAC>;\nexport type UpdateTaskAT = ReturnType<typeof updateTaskAC>;\nexport type SetTasksAT = ReturnType<typeof setTasksAC>;\nexport type setTaskLoadingStatusAT = ReturnType<typeof setTaskLoadingStatusAC>;\n\nexport type TasksThunkT<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppRootStateT,\n  unknown,\n  | ActionsT\n  | SetAppErrorAT\n  | setAppStatusAT\n  | changeTodoListEntityStatusAT\n  | setAppSuccessAT\n>;\n\nexport type TaskStateT = {\n  [key: string]: Array<TaskDomainT>;\n};\n\nexport type TaskDomainT = TaskT & {\n  entityTaskStatus: StatusT;\n};\n\nexport type UpdateDomainTaskModelT = {\n  title?: string;\n  description?: string;\n  status?: TaskStatuses;\n  priority?: TaskPriorities;\n  startDate?: string;\n  deadline?: string;\n};\n\n// * reducer\nconst initialState: TaskStateT = {};\n\nexport const tasksReducer = (\n  state: TaskStateT = initialState,\n  action: ActionsT\n): TaskStateT => {\n  const {\n    REMOVE_TASK,\n    ADD_TASK,\n    UPDATE_TASK,\n    SET_TASKS,\n    SET_TASK_LOADING_STATUS,\n  } = TasksActionsTypes;\n\n  switch (action.type) {\n    case REMOVE_TASK: {\n      return {\n        ...state,\n        [action.todoListID]: state[action.todoListID].filter(\n          (task) => task.id !== action.taskId\n        ),\n      };\n    }\n    case ADD_TASK: {\n      const { task } = action;\n      return {\n        ...state,\n        [task.todoListId]: [\n          { ...task, entityTaskStatus: \"idle\" },\n          ...state[task.todoListId],\n        ],\n      };\n    }\n    case UPDATE_TASK: {\n      return {\n        ...state,\n        [action.todoListID]: state[action.todoListID].map((t) =>\n          t.id === action.taskId ? { ...t, ...action.model } : t\n        ),\n      };\n    }\n    case TodolistsActionTypes.ADD_TODOLIST: {\n      return {\n        ...state,\n        [action.todoList.id]: [],\n      };\n    }\n    case TodolistsActionTypes.REMOVE_TODOLIST: {\n      const copyState = { ...state };\n      delete copyState[action.id];\n      return copyState;\n    }\n    case TodolistsActionTypes.SET_TODO_LISTS: {\n      const stateCopy = { ...state };\n      action.todoLists.forEach((tl) => {\n        stateCopy[tl.id] = [];\n      });\n\n      return stateCopy;\n    }\n    case SET_TASKS: {\n      return {\n        ...state,\n        [action.todoListID]: action.tasks.map((t) => ({\n          ...t,\n          entityTaskStatus: \"idle\",\n        })),\n      };\n    }\n    case SET_TASK_LOADING_STATUS: {\n      return {\n        ...state,\n        [action.todoListID]: state[action.todoListID].map((t) =>\n          t.id === action.taskId\n            ? {\n                ...t,\n                entityTaskStatus: action.taskLoadingStatus,\n              }\n            : t\n        ),\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n// * Action Creators\nexport const removeTaskAC = (taskId: string, todoListID: string) => {\n  return {\n    type: TasksActionsTypes.REMOVE_TASK,\n    taskId,\n    todoListID,\n  } as const;\n};\n\nexport const addTaskAC = (task: TaskT) => {\n  return {\n    type: TasksActionsTypes.ADD_TASK,\n    task,\n  } as const;\n};\n\nexport const updateTaskAC = (\n  taskId: string,\n  todoListID: string,\n  model: UpdateDomainTaskModelT\n) => {\n  return {\n    type: TasksActionsTypes.UPDATE_TASK,\n    taskId,\n    todoListID,\n    model,\n  } as const;\n};\n\nexport const setTasksAC = (todoListID: string, tasks: Array<TaskT>) => {\n  return {\n    type: TasksActionsTypes.SET_TASKS,\n    todoListID,\n    tasks,\n  } as const;\n};\n\nexport const setTaskLoadingStatusAC = (\n  taskId: string,\n  todoListID: string,\n  taskLoadingStatus: StatusT\n) => {\n  return {\n    type: TasksActionsTypes.SET_TASK_LOADING_STATUS,\n    taskId,\n    todoListID,\n    taskLoadingStatus,\n  } as const;\n};\n\n//* Thunks\nexport const fetchTasks = (todoListId: string): TasksThunkT => (dispatch) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  dispatch(changeTodoListEntityStatusAC(todoListId, \"loading\"));\n  todoListsAPI\n    .getTasks(todoListId)\n    .then((res) => {\n      dispatch(setTasksAC(todoListId, res.data.items));\n      dispatch(setAppStatusAC(\"succeeded\"));\n      dispatch(changeTodoListEntityStatusAC(todoListId, \"succeeded\"));\n    })\n    .catch((err) => handleServerNetworkError(err, dispatch));\n};\n\nexport const deleteTask = (taskId: string, todoListId: string): TasksThunkT => (\n  dispatch\n) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  dispatch(setTaskLoadingStatusAC(taskId, todoListId, \"loading\"));\n\n  todoListsAPI\n    .deleteTask(taskId, todoListId)\n    .then(() => {\n      dispatch(removeTaskAC(taskId, todoListId));\n      dispatch(setAppStatusAC(\"succeeded\"));\n      dispatch(setAppSuccessAC(\"Task was deleted!\"));\n    })\n    .catch((err) => handleServerNetworkError(err, dispatch));\n};\n\nexport const createTask = (todoListId: string, title: string): TasksThunkT => (\n  dispatch\n) => {\n  dispatch(setAppStatusAC(\"loading\"));\n  dispatch(changeTodoListEntityStatusAC(todoListId, \"loading\"));\n  todoListsAPI\n    .createTask(todoListId, title)\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(addTaskAC(res.data.data.item));\n        dispatch(setAppStatusAC(\"succeeded\"));\n        dispatch(changeTodoListEntityStatusAC(todoListId, \"succeeded\"));\n        dispatch(setAppSuccessAC(\"Task was added!\"));\n      } else {\n        handleServerAppError(res.data, dispatch);\n        dispatch(changeTodoListEntityStatusAC(todoListId, \"failed\"));\n      }\n    })\n    .catch((err) => {\n      handleServerNetworkError(err, dispatch);\n      dispatch(changeTodoListEntityStatusAC(todoListId, \"failed\"));\n    });\n};\n\nexport const updateTask = (\n  taskId: string,\n  todoListId: string,\n  domainModel: UpdateDomainTaskModelT\n): TasksThunkT => (dispatch, getState) => {\n  const state = getState();\n  const task = state.tasks[todoListId].find((t) => t.id === taskId);\n\n  dispatch(setTaskLoadingStatusAC(taskId, todoListId, \"loading\"));\n  if (!task) {\n    throw new Error(\"Task no found in the STATE\");\n  }\n\n  const apiModel: UpdateTaskModelType = {\n    title: task.title,\n    description: task.description,\n    status: task.status,\n    priority: TaskPriorities.Low,\n    startDate: task.startDate,\n    deadline: task.deadline,\n    ...domainModel,\n  };\n\n  todoListsAPI\n    .updateTask(taskId, todoListId, apiModel)\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(updateTaskAC(taskId, todoListId, domainModel));\n        dispatch(setAppSuccessAC(\"Task was updated!\"));\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n      dispatch(setTaskLoadingStatusAC(taskId, todoListId, \"succeeded\"));\n    })\n    .catch((err) => handleServerNetworkError(err, dispatch));\n};\n","import {BallTriangle, Circles} from '@agney/react-loading';\nimport React, {CSSProperties} from \"react\";\n\ntype TaskPreloaderPropsT = {\n    size?: string;\n    type?: \"circle\" | \"triangle\"\n}\n\nexport function TasksPreloader({size = \"100\", type = \"triangle\", ...props}: TaskPreloaderPropsT) {\n    const preloaderTriangleStyle: CSSProperties = {\n        width: `${size}px`,\n        color: \"#dc004e\",\n        margin: \"20px auto 0\",\n    };\n\n    const preloaderCircleStyle: CSSProperties = {\n        width: `${size}px`,\n        color: \"#dc004e\",\n        position: \"absolute\",\n        left: \"11px\",\n        top: \"11px\",\n    };\n\n    return (\n        <div style={type === \"circle\" ? preloaderCircleStyle : preloaderTriangleStyle}>\n            {type === \"circle\" ? <Circles/> : <BallTriangle/>}\n        </div>\n    );\n}","import React, {ChangeEvent, useCallback} from \"react\";\nimport { EditableSpan } from \"../../../../components/EditableSpan/EditableSpan\";\nimport { Box, Checkbox, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { deleteTask, TaskDomainT, updateTask } from \"../../tasks-reducer\";\nimport { useDispatch } from \"react-redux\";\nimport { TaskStatuses } from \"../../../../api/todolists-api\";\nimport { TasksPreloader } from \"../../../../components/TasksPreloader/TasksPreloader\";\n\nexport type TodoListItemType = {\n  todoListId: string;\n  task: TaskDomainT;\n};\n\nconst useStyles = makeStyles({\n  listItem: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    maxWidth: \"250px\",\n  },\n});\n\nexport const Task: React.FC<TodoListItemType> = React.memo((props) => {\n  const { task, todoListId } = props;\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const removeTask = useCallback(() => {\n    dispatch(deleteTask(task.id, todoListId));\n  }, [dispatch, todoListId, task.id]);\n\n  const changeTaskStatus = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      const { checked } = e.currentTarget;\n      const status = checked ? TaskStatuses.Completed : TaskStatuses.New;\n\n      dispatch(updateTask(task.id, todoListId, { status }));\n    },\n    [dispatch, todoListId, task.id]\n  );\n\n  const changeTitle = useCallback(\n    (newTitle: string): void => {\n      dispatch(updateTask(task.id, todoListId, { title: newTitle }));\n    },\n    [dispatch, todoListId, task.id]\n  );\n\n\n  return (\n    <li\n      className={`${task.status === TaskStatuses.Completed ? \"is-done\" : \"\"} ${\n        classes.listItem\n      }`}\n    >\n      <Box style={{ position: \"relative\" }}>\n        <span className={`${task.entityTaskStatus !== \"loading\" ? \"visibility\" : \"\"}`}>\n          <TasksPreloader size={\"20\"} type={\"circle\"} />\n        </span>\n        <Checkbox\n          className={`${task.entityTaskStatus === \"loading\" ? \"visibility\" : \"\"}`}\n          onChange={changeTaskStatus}\n          checked={task.status === TaskStatuses.Completed}\n          color={\"primary\"}\n        />\n        <EditableSpan taskTitle={task.title} changeTitle={changeTitle} disabled={task.entityTaskStatus === \"loading\"}/>\n      </Box>\n      <IconButton onClick={removeTask} disabled={task.entityTaskStatus === \"loading\"}>\n        <Delete />\n      </IconButton>\n    </li>\n  );\n});\n","import React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useState,\n} from \"react\";\nimport { IconButton, TextField } from \"@material-ui/core\";\nimport { AddBox } from \"@material-ui/icons\";\n\ntype AddItemFormType = {\n  addItem: (title: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n};\n\nexport const AddItemForm = React.memo(({ disabled = false, ...props }: AddItemFormType) => {\n  const { addItem, placeholder } = props;\n\n  const [title, setTitle] = useState<string>(\"\");\n  const [error, setError] = useState<string | null>(null);\n\n  const onAddItem = useCallback(() => {\n    const itemTitle = title.trim();\n    if (itemTitle) {\n      addItem(itemTitle);\n    } else {\n      setError(\"Title is required!\");\n    }\n\n    setTitle(\"\");\n  }, [title, addItem]);\n\n  const onChangeHandler = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      if (error) setError(\"\");\n      setTitle(e.currentTarget.value);\n    },\n    [error]\n  );\n\n  const onKeyPressHandler = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Enter\") onAddItem();\n    },\n    [onAddItem]\n  );\n\n  return (\n    <div style={{ marginBottom: \"20px\" }}>\n      <TextField\n          disabled={disabled}\n        variant={\"outlined\"}\n        value={title}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n        error={!!error}\n        helperText={error}\n        label={placeholder ? placeholder : \"Enter task name...\"}\n      />\n      <IconButton onClick={onAddItem} color={\"primary\"} disabled={disabled}>\n        <AddBox />\n      </IconButton>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { Task } from \"./Task/Task\";\nimport { AddItemForm } from \"../../../components/AddItemForm/AddItemFrom\";\nimport { EditableSpan } from \"../../../components/EditableSpan/EditableSpan\";\nimport { AppBar, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport Button from \"@material-ui/core/Button\";\nimport s from \"../../../Common.module.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"../../../app/store\";\nimport {createTask, fetchTasks, TaskDomainT} from \"../tasks-reducer\";\nimport {\n  changeTodolistFilterAC,\n  deleteTodoList,\n  TodolistDomainT,\n  updateTodoList,\n} from \"../todolists-reducer\";\nimport { TaskStatuses, TaskT } from \"../../../api/todolists-api\";\nimport { TasksPreloader } from \"../../../components/TasksPreloader/TasksPreloader\";\nimport { StatusT } from \"../../../app/app-reducer\";\n\ntype TodoListPropsType = {\n  todoListId: string;\n  demo?: boolean;\n};\n\nexport const TodoList = React.memo(({ demo = false, ...props} : TodoListPropsType) => {\n\n  const todoList = useSelector<AppRootStateT, TodolistDomainT>(\n    (state) => state.todoLists.filter((tl) => props.todoListId === tl.id)[0]\n  );\n  const tasks = useSelector<AppRootStateT, Array<TaskDomainT>>(\n    (state) => state.tasks[props.todoListId]\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if(demo) return;\n\n    dispatch(fetchTasks(todoList.id));\n\n  }, [dispatch, todoList.id]);\n\n  let tasksForTodoList = useMemo(() => {\n    if (todoList.filter === \"active\") {\n      return tasks.filter((task) => task.status === TaskStatuses.New);\n    }\n    if (todoList.filter === \"completed\") {\n      return tasks.filter((task) => task.status === TaskStatuses.Completed);\n    }\n\n    return tasks;\n  }, [todoList.filter, tasks]);\n\n  const addTask = useCallback(\n    (title: string) => {\n      dispatch(createTask(todoList.id, title));\n    },\n    [dispatch, todoList.id]\n  );\n\n  const onAllClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"all\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const onActiveClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"active\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const onCompletedClickHandler = useCallback(() => {\n    dispatch(changeTodolistFilterAC(\"completed\", todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const removeTodoList = useCallback((): void => {\n    dispatch(deleteTodoList(todoList.id));\n  }, [dispatch, todoList.id]);\n\n  const changeTodoListTitle = useCallback(\n    (newTitle: string) => {\n      dispatch(updateTodoList(todoList.id, newTitle));\n    },\n    [dispatch, todoList.id]\n  );\n\n  const showNoTasksMessage = (filterName: string): JSX.Element => {\n    filterName = filterName === \"all\" ? \"any\" : filterName;\n    return (\n      <span className={s.noTasksMessage}>You have no {filterName} tasks</span>\n    );\n  };\n\n  return (\n    <div>\n      <h3>\n        <EditableSpan\n          taskTitle={todoList.title}\n          changeTitle={changeTodoListTitle}\n          disabled={todoList.entityStatus === \"loading\"}\n        />\n        <IconButton onClick={removeTodoList} disabled={todoList.entityStatus === \"loading\"}>\n          <Delete />\n        </IconButton>\n      </h3>\n      <AddItemForm addItem={addTask} disabled={todoList.entityStatus === \"loading\"}/>\n      <div className={s.btnGroup}>\n        <Button\n          variant={todoList.filter === \"all\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onAllClickHandler}\n          size={\"small\"}\n        >\n          All\n        </Button>\n        <Button\n          variant={todoList.filter === \"active\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onActiveClickHandler}\n          size={\"small\"}\n        >\n          Active\n        </Button>\n        <Button\n          variant={todoList.filter === \"completed\" ? \"outlined\" : \"contained\"}\n          color={\"primary\"}\n          onClick={onCompletedClickHandler}\n          size={\"small\"}\n        >\n          Completed\n        </Button>\n      </div>\n      {todoList.entityStatus === \"loading\" ? (\n        <TasksPreloader />\n      ) : (\n        <ul>\n          {tasksForTodoList.length\n            ? tasksForTodoList.map((task) => (\n                <Task key={task.id} todoListId={props.todoListId} task={task} />\n              ))\n            : showNoTasksMessage(todoList.filter)}\n        </ul>\n      )}\n    </div>\n  );\n});\n","import React from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"../../app/store\";\nimport {appActionStatusT, setAppErrorAC, setAppSuccessAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport function CustomizedSnackbars() {\n  const appActionStatus = useSelector<AppRootStateT, appActionStatusT>(\n    (state) => state.app.appActionStatus\n  );\n\n  const message = appActionStatus.error || appActionStatus.success;\n  const snackbarType = appActionStatus.error ? \"error\" : \"success\";\n\n\n  const dispatch = useDispatch();\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    dispatch(setAppErrorAC(null));\n    dispatch(setAppSuccessAC(null));\n  };\n\n  return (\n    <Snackbar open={!!appActionStatus.error || !!appActionStatus.success} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={snackbarType}>\n        {message}\n      </Alert>\n    </Snackbar>\n  );\n}\n","import React, { useCallback, useEffect } from \"react\";\nimport \"./App.css\";\nimport { TodoList } from \"../features/TodoLists/TodoList/TodoList\";\nimport { AddItemForm } from \"../components/AddItemForm/AddItemFrom\";\nimport {\n  AppBar,\n  Button,\n  IconButton,\n  Typography,\n  Toolbar,\n  Container,\n  Grid,\n  Paper, LinearProgress,\n} from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport {\n  createTodoList,\n  fetchTodoListsTC,\n  TodolistDomainT,\n} from \"../features/TodoLists/todolists-reducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateT } from \"./store\";\nimport {CustomizedSnackbars} from \"../components/ErrorSnackbar/ErrorSnackBar\";\nimport {StatusT} from \"./app-reducer\";\n\ntype AppPropsT = {\n  demo?: boolean;\n}\n\nfunction App({demo = false, ...props}: AppPropsT) {\n  const todoLists = useSelector<AppRootStateT, Array<TodolistDomainT>>(\n    (state) => state.todoLists\n  );\n  const appStatus = useSelector<AppRootStateT, StatusT>(state => state.app.status)\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if(demo) return;\n    dispatch(fetchTodoListsTC());\n  }, [dispatch]);\n\n  const addTodoList = useCallback(\n    (todoListTitle: string): void => {\n      dispatch(createTodoList(todoListTitle));\n    },\n    [dispatch]\n  );\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">News</Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n        {appStatus === \"loading\" && <LinearProgress color=\"secondary\"/>}\n\n        <CustomizedSnackbars/>\n      </AppBar>\n\n      <Container>\n        <Grid\n          container\n          style={{ padding: \"10px\" }}\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <AddItemForm\n            addItem={addTodoList}\n            placeholder={\"Enter Todo List name...\"}\n          />\n        </Grid>\n\n        <Grid container spacing={3}>\n          {todoLists.map((todoList) => {\n            return (\n              <Grid item key={todoList.id}>\n                <Paper elevation={5} style={{ padding: \"20px 10px\" }}>\n                  <TodoList demo={demo} key={todoList.id} todoListId={todoList.id} />\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\nimport { todolistsReducer } from \"../features/TodoLists/todolists-reducer\";\nimport { tasksReducer } from \"../features/TodoLists/tasks-reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from 'redux-thunk';\nimport {appReducer} from \"./app-reducer\";\n\nconst rootReducer = combineReducers({\n  todoLists: todolistsReducer,\n  tasks: tasksReducer,\n  app: appReducer\n});\n\nexport type AppRootStateT = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./app/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroup\":\"Common_btnGroup__3hj-K\",\"noTasksMessage\":\"Common_noTasksMessage__2S6NA\"};"],"sourceRoot":""}